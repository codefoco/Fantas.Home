{
  "HOWTO_UPDATE_DOCS.html": {
    "href": "HOWTO_UPDATE_DOCS.html",
    "title": "Fantas.Web | Fantas",
    "keywords": "Fantas.Web docfx docfx.json docfx build"
  },
  "README.html": {
    "href": "README.html",
    "title": "Fantas.Web | Fantas",
    "keywords": "Fantas.Web Fantas Web Site"
  },
  "api/Fantas.Animation.html": {
    "href": "api/Fantas.Animation.html",
    "title": "Class Animation | Fantas",
    "keywords": "Class Animation Namespace Fantas Assembly Fantas.dll Animation class (Move, Scale, Rotate, Fade...) public sealed class Animation Inheritance object Animation Inherited Members object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Properties Duration Duration to complete the animation. WARNING: Some animation might ignore the change to this value after the animation is created public double Duration { get; set; } Property Value double ReversedAnimation Create a reversed animation WARNING: Fade, and Texture animation won't have reverse You have to manually create FadeIn/FadeOut reverses public Animation ReversedAnimation { get; } Property Value Animation Speed Speed of animation public float Speed { get; set; } Property Value float TimingFunction Delegate used to customize the timing public AnimationTimingFunction TimingFunction { get; set; } Property Value AnimationTimingFunction TimingMode Animation timing mode (linear, ease-in ..) public AnimationTimingMode TimingMode { get; set; } Property Value AnimationTimingMode Methods Animate(Texture[], double) Animate the sprite texture public static Animation Animate(Texture[] textures, double timePerFrame) Parameters textures Texture[] list of textures of animation timePerFrame double Time per Frame (in seconds) Returns Animation Animation object that can be executed on a SpriteNode Animate(Texture[], double, bool, bool) Animate the sprite texture public static Animation Animate(Texture[] textures, double timePerFrame, bool resize, bool restore) Parameters textures Texture[] list of textures of animation timePerFrame double Time per Frame (in seconds) resize bool resize SpriteNode according to texture restore bool Restore SpriteNode to original texture when animation is finished or removed Returns Animation Animation object that can be executed on a SpriteNode Colorize(Color, float, double) Animate sprite tint color public static Animation Colorize(Color color, float colorBlendFactor, double duration) Parameters color Color Final tint color of Sprite colorBlendFactor float Final color blend factor duration double Duration in seconds Returns Animation Animation object that can be executed on a SpriteNode Colorize(float, double) Animate sprite tint color public static Animation Colorize(float colorBlendFactor, double duration) Parameters colorBlendFactor float Final color blend factor duration double Duration in seconds Returns Animation Animation object that can be executed on a SpriteNode Custom(double, Action<Node, float>) Execute the callback over the execution of animation public static Animation Custom(double duration, Action<Node, float> callback) Parameters duration double Duration in seconds callback Action<Node, float> Called along the execution of the animation Returns Animation Custom animation object Equals(object) Equals(obj) public override bool Equals(object obj) Parameters obj object Returns bool FadeAlphaBy(float, double) Change the alpha of node public static Animation FadeAlphaBy(float delta, double duration) Parameters delta float alpha factor duration double Duration in seconds Returns Animation Animation object that can be executed on a Node FadeAlphaTo(float, double) Animate new alpha of node public static Animation FadeAlphaTo(float alpha, double duration) Parameters alpha float Final alpha duration double Duration in seconds Returns Animation Animation object that can be executed on a Node FadeIn(double) Change the alpha to 1.0 public static Animation FadeIn(double duration) Parameters duration double duration in seconds Returns Animation Animation object that can be executed on a Node FadeOut(double) Change the alpha to 0.0 public static Animation FadeOut(double duration) Parameters duration double Duration in seconds Returns Animation Animation object that can be executed on a Node GetHashCode() Animation GetHashCode public override int GetHashCode() Returns int Group(params Animation[]) Create an Animation that groups a set of other animations, The animations will run in parallel (e.g Rotate + Fade at the same time) public static Animation Group(params Animation[] animations) Parameters animations Animation[] Array of animations to be grouped Returns Animation Animation object that can be executed on a Node Hide() Hide the node public static Animation Hide() Returns Animation Animation object that can be executed on a Node MoveBy(Vector2, double) Move a node vertically and horizontally relative to the current position public static Animation MoveBy(Vector2 delta, double duration) Parameters delta Vector2 Delta to move duration double Duration (in Seconds) Returns Animation Animation object that can be executed on a Node MoveBy(float, float, double) Move a node vertically and horizontally relative to the current position public static Animation MoveBy(float deltaX, float deltaY, double duration) Parameters deltaX float Delta X deltaY float Delta Y duration double Duration (in Seconds) Returns Animation Animation object that can be executed on a Node MoveTo(PointF, double) Move node to a new position public static Animation MoveTo(PointF location, double duration) Parameters location PointF New node position duration double Duration in seconds Returns Animation Animation object that can be executed on a Node MoveToX(float, double) Move node horizontally public static Animation MoveToX(float x, double duration) Parameters x float New node X position duration double Duration in seconds Returns Animation Animation object that can be executed on a Node MoveToY(float, double) Move node vertically public static Animation MoveToY(float y, double duration) Parameters y float New node Y position duration double Duration in seconds Returns Animation Animation object that can be executed on a Node MoveXBy(float, double) Move a node horizontally relative to the current position public static Animation MoveXBy(float deltaX, double duration) Parameters deltaX float Delta X duration double Duration (in Seconds) Returns Animation Animation object that can be executed on a Node MoveYBy(float, double) Move a node vertically relative to the current position public static Animation MoveYBy(float deltaY, double duration) Parameters deltaY float Delta Y duration double Duration (in Seconds) Returns Animation Animation object that can be executed on a Node OrbitNode(Node, double, double, double) Rotate Node around another Node public static Animation OrbitNode(Node center, double angle, double duration, double factor = 1) Parameters center Node angle double duration double factor double Radius factor for the end of the orbit (1 remain same) Returns Animation OrbitPoint(PointF, double, double, double) Rotate Node around a pivot public static Animation OrbitPoint(PointF center, double angle, double duration, double factor = 1) Parameters center PointF angle double duration double factor double Radius factor for the end of the orbit (1 remain same) Returns Animation RemoveFromParent() When performed, removed the Node from the parent. public static Animation RemoveFromParent() Returns Animation Animation object that can be executed on a Node Repeat(Animation, int) Repeat animation N times public static Animation Repeat(Animation animation, int count) Parameters animation Animation Animation to be repeated count int Number of times to repeat Returns Animation Animation object that can be executed on a Node RepeatForever(Animation) Repeat animation forever public static Animation RepeatForever(Animation animation) Parameters animation Animation Animation to be repeated forever Returns Animation Animation object that can be executed on a Node ResizeTo(SizeF, double) Resize a SpriteNode public static Animation ResizeTo(SizeF size, double duration) Parameters size SizeF New size of SpriteNode duration double Duration in seconds Returns Animation Animation object that can be executed on a SpriteNode ResizeToHeight(float, double) Change SpriteNode Height public static Animation ResizeToHeight(float height, double duration) Parameters height float New height of SpriteNode duration double Duration in seconds Returns Animation Animation object that can be executed on a SpriteNode ResizeToWidth(float, double) Change SpriteNode width public static Animation ResizeToWidth(float width, double duration) Parameters width float New width of SpriteNode duration double Duration in seconds Returns Animation Animation object that can be executed on a SpriteNode RotateBy(double, double) Rotate by a angle delta public static Animation RotateBy(double radians, double duration) Parameters radians double delta angle in radians duration double Duration in seconds Returns Animation Animation object that can be executed on a Node RotateTo(double, double) Rotate to the given angle public static Animation RotateTo(double radians, double duration) Parameters radians double Final angle in radians duration double Duration in seconds Returns Animation Animation object that can be executed on a Node RunAction(Action) Run a action callback public static Animation RunAction(Action action) Parameters action Action Action to be invoked when animation is executed Returns Animation Animation object that can be executed on a Node ScaleBy(float, double) Animate node applying a new scale public static Animation ScaleBy(float scale, double duration) Parameters scale float Scale factor duration double Duration in seconds Returns Animation Animation object that can be executed on a Node ScaleTo(SizeF, double) Change scale to make node reach new size public static Animation ScaleTo(SizeF size, double duration) Parameters size SizeF New size of Node duration double Duration in seconds Returns Animation Animation object that can be executed on a Node ScaleTo(float, double) Set node to a new scale public static Animation ScaleTo(float newScale, double duration) Parameters newScale float Final scale of Node duration double Duration in seconds Returns Animation Animation object that can be executed on a Node ScaleTo(float, float, double) Set node to a new scale public static Animation ScaleTo(float xScale, float yScale, double duration) Parameters xScale float Final xscale of Node yScale float Final yscale of Node duration double Duration in seconds Returns Animation Animation object that can be executed on a Node ScaleXTo(float, double) Change X scale public static Animation ScaleXTo(float xscale, double duration) Parameters xscale float Final xscale of Node duration double Duration in seconds Returns Animation Animation object that can be executed on a Node ScaleYTo(float, double) Change Y scale public static Animation ScaleYTo(float yscale, double duration) Parameters yscale float Final yscale of Node duration double Duration in seconds Returns Animation Animation object that can be executed on a Node Sequence(params Animation[]) Create a sequence animation from a list of Animations, Each animation will executed in sequence a1 -> a2 -> a3 public static Animation Sequence(params Animation[] animations) Parameters animations Animation[] Array of animations Returns Animation Animation object that can be executed on a Node SetTexture(Texture) Set new texture to SpriteNode public static Animation SetTexture(Texture texture) Parameters texture Texture Texture to be applied to SpriteNode Returns Animation Animation object that can be executed on a SpriteNode SetTexture(Texture, bool) Set new texture to SpriteNode public static Animation SetTexture(Texture texture, bool resize) Parameters texture Texture Texture to be applied to SpriteNode resize bool Flag to control if the SpriteNode should be resized to the size of texture Returns Animation Animation object that can be executed on a SpriteNode SineHorizontal(float, float, double) Oscillate node vertical position using a Sine wave public static Animation SineHorizontal(float amplitude, float frequency, double duration) Parameters amplitude float Amplitude of sine movement frequency float Frequency of oscillation duration double Duration of oscillation in seconds Returns Animation SineVertical(float, float, double) Oscillate node vertical position using a Sine wave public static Animation SineVertical(float amplitude, float frequency, double duration) Parameters amplitude float Amplitude of sine movement frequency float Frequency of oscillation duration double Duration of oscillation in seconds Returns Animation Unhide() Unhide node public static Animation Unhide() Returns Animation Animation object that can be executed on a Node Wait(double) Wait, useful to chain with other animations (e.g Rotate then Wait then Fade Out) public static Animation Wait(double duration) Parameters duration double Time to wait, in seconds Returns Animation Animation object that can be executed on a Node"
  },
  "api/Fantas.AnimationTimingFunction.html": {
    "href": "api/Fantas.AnimationTimingFunction.html",
    "title": "Delegate AnimationTimingFunction | Fantas",
    "keywords": "Delegate AnimationTimingFunction Namespace Fantas Assembly Fantas.dll Delegate used to customize timing function public delegate float AnimationTimingFunction(float time) Parameters time float Returns float Constructors AnimationTimingFunction(object, nint) public AnimationTimingFunction(object @object, nint method) Parameters object object method nint Methods BeginInvoke(float, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(float time, AsyncCallback callback, object @object) Parameters time float callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual float EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns float Invoke(float) public virtual float Invoke(float time) Parameters time float Returns float"
  },
  "api/Fantas.AnimationTimingMode.html": {
    "href": "api/Fantas.AnimationTimingMode.html",
    "title": "Enum AnimationTimingMode | Fantas",
    "keywords": "Enum AnimationTimingMode Namespace Fantas Assembly Fantas.dll Animation timing modes public enum AnimationTimingMode Fields EaseInBack = 13 EasyIn Back EaseInBounce = 19 EaseIn Bounce EaseInCirc = 7 EaseIn Circ EaseInCubic = 1 EasyIn Cubic EaseInElastic = 16 EaseIn Elastic EaseInExpo = 10 EaseIn Exponential EaseInOutBack = 15 EaseInOut Back EaseInOutBounce = 21 EaseInOut Bounce EaseInOutCirc = 9 EaseInOut Circ EaseInOutCubic = 3 EasyInOut Start and finishes quickly, slow in the middle EaseInOutElastic = 18 EaseInOut Elastic EaseInOutExpo = 12 EaseInOut Exponential EaseInOutSine = 6 EaseInOut Sine EaseInSine = 4 EasyIn Sine EaseOutBack = 14 EaseOut Back EaseOutBounce = 20 EaseOut Bounce EaseOutCirc = 8 EaseOut Circ EaseOutCubic = 2 EasyOut Cubic - Start fast, slowdown on finish EaseOutElastic = 17 EaseOut Elastic EaseOutExpo = 11 EaseOut Exponential EaseOutSine = 5 EaseOut Sine Linear = 0 Animate frame linearly SmoothStep = 22 Animate frame using smoothstep function"
  },
  "api/Fantas.Audio.AudioSession.html": {
    "href": "api/Fantas.Audio.AudioSession.html",
    "title": "Class AudioSession | Fantas",
    "keywords": "Class AudioSession Namespace Fantas.Audio Assembly Fantas.dll Audio session class have helpers to query audio status in the system and set global values like MusicVolume public static class AudioSession Inheritance object AudioSession Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties IsHeadsetConnected Check if headset is connected to device (It's only implemented on iOS and Android) public static bool IsHeadsetConnected { get; } Property Value bool IsOtherAudioPlaying Check if another audio music is already playing for instance if the user is listening to a music on another app (It's only implemented on iOS and Android) public static bool IsOtherAudioPlaying { get; } Property Value bool MusicVolume Control global music volume public static float MusicVolume { get; set; } Property Value float SoundEffectsVolume Control global sound effects volume public static float SoundEffectsVolume { get; set; } Property Value float"
  },
  "api/Fantas.Audio.Music.html": {
    "href": "api/Fantas.Audio.Music.html",
    "title": "Class Music | Fantas",
    "keywords": "Class Music Namespace Fantas.Audio Assembly Fantas.dll Background music object Recommended formats: ogg on linux m4a (H264/AAC) on Apple and Android wma on Windows/UWP (mp3 isn't recommended since it has licensing concerns) public sealed class Music Inheritance object Music Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Duration Duration of music (in seconds) public float Duration { get; } Property Value float Name Music name public string Name { get; } Property Value string Methods FromFile(string) Load a music from file public static Music FromFile(string fileName) Parameters fileName string Returns Music FromName(string) Load a music by name public static Music FromName(string name) Parameters name string Returns Music"
  },
  "api/Fantas.Audio.MusicPlayer.html": {
    "href": "api/Fantas.Audio.MusicPlayer.html",
    "title": "Class MusicPlayer | Fantas",
    "keywords": "Class MusicPlayer Namespace Fantas.Audio Assembly Fantas.dll Controls background music public static class MusicPlayer Inheritance object MusicPlayer Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties IsPlaying Check if music player is playing public static bool IsPlaying { get; } Property Value bool IsRepeating Control if the music should repeat in loop public static bool IsRepeating { get; set; } Property Value bool PlayPosition Get music player current position in seconds public static float PlayPosition { get; } Property Value float Methods Pause() Pause current music being played public static void Pause() Play(Music) Play a music in background public static void Play(Music music) Parameters music Music music (m4a, ogg, wma) Exceptions ArgumentNullException Play(Music, float) Play the music starting from offset (in seconds) public static void Play(Music music, float startTime) Parameters music Music Music startTime float Start time in seconds Resume() Resume after pause public static void Resume() Stop() Stop music public static void Stop()"
  },
  "api/Fantas.Audio.SoundEffect.html": {
    "href": "api/Fantas.Audio.SoundEffect.html",
    "title": "Class SoundEffect | Fantas",
    "keywords": "Class SoundEffect Namespace Fantas.Audio Assembly Fantas.dll Sound Effect is a short sound, like a click or explosion Recommended format: WAV or CAF (on Apple platforms) public sealed class SoundEffect Inheritance object SoundEffect Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Duration Duration in seconds public float Duration { get; } Property Value float Name Name of sound effect public string Name { get; } Property Value string Methods FromFile(string) Load a sound effect from file public static SoundEffect FromFile(string fileName) Parameters fileName string Returns SoundEffect FromName(string) Load a sound effect by name public static SoundEffect FromName(string name) Parameters name string Returns SoundEffect FromResource(Assembly, string) Load Sound Effect from embedded resource public static SoundEffect FromResource(Assembly assembly, string resourceName) Parameters assembly Assembly Assembly where is located the embedded resource resourceName string embedded resource name Returns SoundEffect Exceptions ArgumentNullException FromResource(string) Load Sound Effect from embedded resource public static SoundEffect FromResource(string resourceName) Parameters resourceName string Returns SoundEffect Exceptions ArgumentNullException FromStream(string, Stream) Load a sound effect from stream public static SoundEffect FromStream(string name, Stream stream) Parameters name string stream Stream Returns SoundEffect Play() Play sound effect (fire and forget) public void Play() Play(float, float, float) Play sound effect changing the volume, pitch and pan volume of sound fx 0-mute 1-max volume pitch -1 one octave bellow, 0 - original, 1 one octave above pan -1 all the way to left speaker, 0 normal, 1 all the way to the right public void Play(float volume, float pitch, float pan) Parameters volume float pitch float pan float"
  },
  "api/Fantas.Audio.html": {
    "href": "api/Fantas.Audio.html",
    "title": "Namespace Fantas.Audio | Fantas",
    "keywords": "Namespace Fantas.Audio Classes AudioSession Audio session class have helpers to query audio status in the system and set global values like MusicVolume Music Background music object Recommended formats: ogg on linux m4a (H264/AAC) on Apple and Android wma on Windows/UWP (mp3 isn't recommended since it has licensing concerns) MusicPlayer Controls background music SoundEffect Sound Effect is a short sound, like a click or explosion Recommended format: WAV or CAF (on Apple platforms)"
  },
  "api/Fantas.BlendMode.html": {
    "href": "api/Fantas.BlendMode.html",
    "title": "Enum BlendMode | Fantas",
    "keywords": "Enum BlendMode Namespace Fantas Assembly Fantas.dll Blend modes operations public enum BlendMode Fields Add = 1 Add source and destination Alpha = 0 Blending source and destination using Alpha Multiply = 3 Source multiplied by destination MultiplyAlpha = 7 Source multiplied by destination, with the alpha channel MultiplyX2 = 4 Source multiplied by destination and doubled Replace = 6 Opaque blend, replacing destination color Screen = 5 Source added to the destination times the inverse of source Subtract = 2 Subtract source from destination"
  },
  "api/Fantas.CameraNode.html": {
    "href": "api/Fantas.CameraNode.html",
    "title": "Class CameraNode | Fantas",
    "keywords": "Class CameraNode Namespace Fantas Assembly Fantas.dll Control which part of the scene is visible in the viewport public class CameraNode : Node Inheritance object Node CameraNode Inherited Members Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Width Node.Height Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CameraNode() Create a camera node public CameraNode() CameraNode(CameraNode) Copy a camera node public CameraNode(CameraNode other) Parameters other CameraNode Methods Contains(Node) Check if node is visible in the camera viewport public bool Contains(Node node) Parameters node Node Node Returns bool Return true if the camera viewport contains the node Copy() Copy this instance protected override Node Copy() Returns Node"
  },
  "api/Fantas.CircleNode.html": {
    "href": "api/Fantas.CircleNode.html",
    "title": "Class CircleNode | Fantas",
    "keywords": "Class CircleNode Namespace Fantas Assembly Fantas.dll Circle shape node public class CircleNode : EllipseNode Inheritance object Node ShapeNode EllipseNode CircleNode Inherited Members EllipseNode.Width EllipseNode.Height ShapeNode.StrokeColor ShapeNode.FillColor ShapeNode.BlendMode ShapeNode.LineWidth ShapeNode.Antialiased Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupBody(CircleNode, int) Constructors CircleNode(CircleNode) Copy a circle node public CircleNode(CircleNode other) Parameters other CircleNode CircleNode(float) Creates a circle node with given radius public CircleNode(float radius) Parameters radius float Methods Copy() Copy this circle node protected override Node Copy() Returns Node"
  },
  "api/Fantas.ColorExtensions.html": {
    "href": "api/Fantas.ColorExtensions.html",
    "title": "Class ColorExtensions | Fantas",
    "keywords": "Class ColorExtensions Namespace Fantas Assembly Fantas.dll Contains Color extensions Implementation code took from Allegro and Troll2D: https://github.com/liballeg/allegro5/blob/master/addons/color/color.c https://github.com/viniciusjarina/troll2d/blob/master/include/troll/color.h public static class ColorExtensions Inheritance object ColorExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods FromHSL(float, float, float) Create a Color using hue, saturation and lightness public static Color FromHSL(float hue, float saturation, float lightness) Parameters hue float saturation float lightness float Returns Color Invert(Color) Invert the color components RGB (it preserves the alpha) Ex 0,0,255 -> 255,255,0 public static Color Invert(this Color self) Parameters self Color Returns Color Lerp(Color, Color, float) Performs linear interpolation of Color. public static Color Lerp(this Color value1, Color value2, float amount) Parameters value1 Color Source Color. value2 Color Destination Color. amount float Interpolation factor. Returns Color Interpolated Color. ToHSL(Color, out float, out float, out float) Get the color components as Hue, Saturation and Lightness public static void ToHSL(this Color self, out float hue, out float saturation, out float lightness) Parameters self Color hue float Hue component (0-360) saturation float Saturation (0f..1f) lightness float Lightness(0f..1f) WithAlpha(Color, float) Create a new color with new alpha value (0-1f) public static Color WithAlpha(this Color self, float alpha) Parameters self Color alpha float Alpha from 0 to 1 Returns Color WithBrightness(Color, float) Create a new color updating the lightness public static Color WithBrightness(this Color self, float delta) Parameters self Color delta float Returns Color WithRotatedHue(Color, float) Create a new color with Hue rotated public static Color WithRotatedHue(this Color self, float angle) Parameters self Color Color angle float Angle to rotate in radian Returns Color WithSaturation(Color, float) Create a new color with new saturation public static Color WithSaturation(this Color self, float delta) Parameters self Color delta float The amount to increase the saturation Returns Color"
  },
  "api/Fantas.CropNode.html": {
    "href": "api/Fantas.CropNode.html",
    "title": "Class CropNode | Fantas",
    "keywords": "Class CropNode Namespace Fantas Assembly Fantas.dll Node to Clip/Crop other nodes public class CropNode : Node Inheritance object Node CropNode Inherited Members Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Width Node.Height Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CropNode(CropNode) Copy an crop node public CropNode(CropNode other) Parameters other CropNode CropNode(SizeF) Creates an crop node public CropNode(SizeF size) Parameters size SizeF Properties AnchorPoint Mask anchor point for drawing and rotation public PointF AnchorPoint { get; set; } Property Value PointF MaskSize Mask crop size public SizeF MaskSize { get; set; } Property Value SizeF Methods Copy() Copy this CropNode protected override Node Copy() Returns Node"
  },
  "api/Fantas.CurrentSystemPlatform.html": {
    "href": "api/Fantas.CurrentSystemPlatform.html",
    "title": "Class CurrentSystemPlatform | Fantas",
    "keywords": "Class CurrentSystemPlatform Namespace Fantas Assembly Fantas.dll Current system platform information (Windows, MacOS.. ) public static class CurrentSystemPlatform Inheritance object CurrentSystemPlatform Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Current Return the current system platform (Windows, MacOS.. ) public static SystemPlatform Current { get; } Property Value SystemPlatform"
  },
  "api/Fantas.EllipseNode.html": {
    "href": "api/Fantas.EllipseNode.html",
    "title": "Class EllipseNode | Fantas",
    "keywords": "Class EllipseNode Namespace Fantas Assembly Fantas.dll Ellipse shape node public class EllipseNode : ShapeNode Inheritance object Node ShapeNode EllipseNode Derived CircleNode Inherited Members ShapeNode.StrokeColor ShapeNode.FillColor ShapeNode.BlendMode ShapeNode.LineWidth ShapeNode.Antialiased Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors EllipseNode(EllipseNode) Copy a circle node public EllipseNode(EllipseNode other) Parameters other EllipseNode EllipseNode(SizeF) Create an ellipse with given size public EllipseNode(SizeF ellipseSize) Parameters ellipseSize SizeF Properties Height Ellipse node height public float Height { get; set; } Property Value float Width Ellipse node width public float Width { get; set; } Property Value float Methods Copy() Copy this ellipse node protected override Node Copy() Returns Node"
  },
  "api/Fantas.Font.html": {
    "href": "api/Fantas.Font.html",
    "title": "Class Font | Fantas",
    "keywords": "Class Font Namespace Fantas Assembly Fantas.dll Font (TTF font on iOS/tvOS/macOS, and SpriteFont on other platforms) public sealed class Font Inheritance object Font Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties DefaultFont Default Font used by LabelNode public static Font DefaultFont { get; set; } Property Value Font Name Font name public string Name { get; } Property Value string Methods FromCompressedResource(Assembly, string) Load a font from a compressed embedded resource public static Font FromCompressedResource(Assembly assembly, string resourceFontName) Parameters assembly Assembly resourceFontName string Returns Font FromCompressedResource(Assembly, string, float) Load a font from a compressed embedded resource using the given scale public static Font FromCompressedResource(Assembly assembly, string resourceFontName, float preferredFontSize) Parameters assembly Assembly resourceFontName string preferredFontSize float Only used on iOS Returns Font FromResource(Assembly, string) Load a font from a embedded resource public static Font FromResource(Assembly assembly, string resourceFontName) Parameters assembly Assembly resourceFontName string Returns Font FromResource(Assembly, string, float) Load a font from a embedded resource using the given scale public static Font FromResource(Assembly assembly, string resourceFontName, float preferredFontSize) Parameters assembly Assembly resourceFontName string preferredFontSize float Preferred Font size to be used in labels (only for TTF fonts) Returns Font"
  },
  "api/Fantas.Game.html": {
    "href": "api/Fantas.Game.html",
    "title": "Class Game | Fantas",
    "keywords": "Class Game Namespace Fantas Assembly Fantas.dll Main Game public class Game Inheritance object Game Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Game() Constructor public Game() Game(Size) public Game(Size preferredWindowSize) Parameters preferredWindowSize Size on Desktop the preferred window size (in points) Properties CurrentScene Current Scene presented public Scene CurrentScene { get; } Property Value Scene GameOptions Get current game options set on Game object public GameOptions GameOptions { get; } Property Value GameOptions Instance Game singleton instance public static Game Instance { get; } Property Value Game IsFullScreen Change/Get Window Full Screen mode public bool IsFullScreen { get; set; } Property Value bool RunOneFrame Flag to make Run, only render one frame. (only works on MonoGame backend) protected bool RunOneFrame { get; set; } Property Value bool ScaleMode Scene Scale Mode, need to be set before creating the scene public SceneScaleMode ScaleMode { get; set; } Property Value SceneScaleMode WindowSize Change the Windows Size This will work mostly on Desktop implementation, public Size WindowSize { get; set; } Property Value Size WindowTitle Change the Windows Title This will work mostly on Desktop implementation, public string WindowTitle { get; set; } Property Value string Methods Exit() Terminate the Application (this has no effect on mobile) public void Exit() GetSceneSnapshot() Get a PNG buffer representation of the presented Scene public byte[] GetSceneSnapshot() Returns byte[] Return current scene frame as PNG encoded in a byte array PresentScene(Scene) Present a scene public void PresentScene(Scene scene) Parameters scene Scene Exceptions ArgumentNullException Run() Run the game main loop public void Run() WindowSizeChanged() Called when Window is resized public virtual void WindowSizeChanged()"
  },
  "api/Fantas.GameOptions.html": {
    "href": "api/Fantas.GameOptions.html",
    "title": "Enum GameOptions | Fantas",
    "keywords": "Enum GameOptions Namespace Fantas Assembly Fantas.dll Game Flags used on game creation object [Flags] public enum GameOptions Fields DontFilterTextures = 4 Use flag DontFilterTextures to do not apply filtering when scaling textures None = 0 No option"
  },
  "api/Fantas.Input.Controller.html": {
    "href": "api/Fantas.Input.Controller.html",
    "title": "Class Controller | Fantas",
    "keywords": "Class Controller Namespace Fantas.Input Assembly Fantas.dll Controller represent one physical GamePad attached to the system public sealed class Controller Inheritance object Controller Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties AnyButtonPressed Return true if any controller button was just pressed public bool AnyButtonPressed { get; } Property Value bool AnyButtonReleased Return true if any controller button was just released public bool AnyButtonReleased { get; } Property Value bool CurrentButtonsState Get combined button states public ControllerButtons CurrentButtonsState { get; } Property Value ControllerButtons DisplayName Controller display name public string DisplayName { get; } Property Value string HasAButton Return true if has A button public bool HasAButton { get; } Property Value bool HasBButton Return true if has B button public bool HasBButton { get; } Property Value bool HasLeftShoulderButton Check if the Game Controller has left shoulder button public bool HasLeftShoulderButton { get; } Property Value bool HasLeftThumbstick Check if the Game Controller has left thumbstick public bool HasLeftThumbstick { get; } Property Value bool HasLeftThumbstickButton Check if the Game Controller has left thumbstick Button public bool HasLeftThumbstickButton { get; } Property Value bool HasLeftTriggerButton Check if the Game Controller has left trigger Button public bool HasLeftTriggerButton { get; } Property Value bool HasMenuButton Check if the Game Controller has Menu/Start button public bool HasMenuButton { get; } Property Value bool HasOptionsButton Check if the Game Controller has Options/Back button public bool HasOptionsButton { get; } Property Value bool HasRightShoulderButton Check if the Game controller has right shoulder button public bool HasRightShoulderButton { get; } Property Value bool HasRightThumbstick Check if the Game Controller has right thumbstick public bool HasRightThumbstick { get; } Property Value bool HasRightThumbstickButton Check if the Game Controller has Right Thumbstick button public bool HasRightThumbstickButton { get; } Property Value bool HasRightTriggerButton Check if the Game Controller has right trigger Button public bool HasRightTriggerButton { get; } Property Value bool HasXButton Return true if has X button public bool HasXButton { get; } Property Value bool HasYButton Return true if has Y button public bool HasYButton { get; } Property Value bool Index Get controller index public int Index { get; } Property Value int IsConnected Check if the controller is connected public bool IsConnected { get; } Property Value bool LeftThumbstickValue Left thumbstick position value public Vector2 LeftThumbstickValue { get; } Property Value Vector2 LeftTriggerValue Left trigger pressed value public float LeftTriggerValue { get; } Property Value float RightThumbstickValue Right thumbstick position value public Vector2 RightThumbstickValue { get; } Property Value Vector2 RightTriggerValue Right trigger value public float RightTriggerValue { get; } Property Value float Methods IsButtonDown(ControllerButtons) Return true if the given button is current pressed public bool IsButtonDown(ControllerButtons button) Parameters button ControllerButtons Controller Button (A, B, X, Y, etc) Returns bool Return true if the given button is current pressed IsButtonPressed(ControllerButtons) Return true if the given button was just pressed public bool IsButtonPressed(ControllerButtons button) Parameters button ControllerButtons Controller Button (A, B, X, Y, etc) Returns bool Return true if the given button was just pressed IsButtonReleased(ControllerButtons) Return true if the given button was just released public bool IsButtonReleased(ControllerButtons button) Parameters button ControllerButtons Controller Button (A, B, X, Y, etc) Returns bool IsButtonUp(ControllerButtons) Return true if the given button is current released public bool IsButtonUp(ControllerButtons button) Parameters button ControllerButtons Controller Button (A, B, X, Y, etc) Returns bool Return true if the given button is current released SetVibration(float, float) Vibrate the Controller (if available) public void SetVibration(float leftMotor, float rightMotor) Parameters leftMotor float rightMotor float Events Connected Notification when Controller is connected or disconnected. public event EventHandler<ControllerChangedEventArgs> Connected Event Type EventHandler<ControllerChangedEventArgs> Disconnected Notification when Controller lost its connection public event EventHandler<ControllerChangedEventArgs> Disconnected Event Type EventHandler<ControllerChangedEventArgs>"
  },
  "api/Fantas.Input.ControllerButtonEventArgs.html": {
    "href": "api/Fantas.Input.ControllerButtonEventArgs.html",
    "title": "Class ControllerButtonEventArgs | Fantas",
    "keywords": "Class ControllerButtonEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data when button is pressed/released public class ControllerButtonEventArgs : EventArgs Inheritance object EventArgs ControllerButtonEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ControllerButtonEventArgs(ControllerButtons, int) Initialize ControllerButtonEventArgs public ControllerButtonEventArgs(ControllerButtons button, int controllerIndex) Parameters button ControllerButtons controllerIndex int Properties Button Controller Button public ControllerButtons Button { get; } Property Value ControllerButtons ControllerIndex Controller Index public int ControllerIndex { get; set; } Property Value int"
  },
  "api/Fantas.Input.ControllerButtons.html": {
    "href": "api/Fantas.Input.ControllerButtons.html",
    "title": "Enum ControllerButtons | Fantas",
    "keywords": "Enum ControllerButtons Namespace Fantas.Input Assembly Fantas.dll Defines the buttons on gamepad. [Flags] public enum ControllerButtons Fields A = 4096 A button (the lower button) B = 8192 B button (button on the right) BigButton = 2048 Big button (like the big X in the Xbox 360) DPadDown = 2 Directional pad down. DPadLeft = 4 Directional pad left. DPadRight = 8 Directional pad right. DPadUp = 1 Directional pad up. LeftShoulder = 256 Left bumper (shoulder) button. LeftThumbstick = 64 Left thumb stick button (pressing the left thumb stick). LeftThumbstickDown = 536870912 Left thumb stick is towards down. LeftThumbstickLeft = 2097152 Left thumb stick is towards the left. LeftThumbstickRight = 1073741824 Left thumb stick is towards the right. LeftThumbstickUp = 268435456 Left thumb stick is towards up. LeftTrigger = 8388608 Left trigger Menu = 16 START or MENU button (depending on your GamePad) None = 0 Use to flag no button is pressed Options = 32 BACK or Options button (depending on your GamePad) RightShoulder = 512 Right bumper (shoulder) button. RightThumbstick = 128 Right thumb stick button (pressing the right thumb stick). RightThumbstickDown = 33554432 Right thumb stick is towards down. RightThumbstickLeft = 134217728 Right thumb stick is towards the left. RightThumbstickRight = 67108864 Right thumb stick is towards the right. RightThumbstickUp = 16777216 Right thumb stick is towards up. RightTrigger = 4194304 Right trigger. X = 16384 X button (button on the left) Y = 32768 Y button (upper button)"
  },
  "api/Fantas.Input.ControllerChangedEventArgs.html": {
    "href": "api/Fantas.Input.ControllerChangedEventArgs.html",
    "title": "Class ControllerChangedEventArgs | Fantas",
    "keywords": "Class ControllerChangedEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data when a controller is added or removed public class ControllerChangedEventArgs : EventArgs Inheritance object EventArgs ControllerChangedEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ControllerChangedEventArgs(int) Initialize ControllerChangedEventArgs public ControllerChangedEventArgs(int controllerIndex) Parameters controllerIndex int Properties ControllerIndex Index of controller public int ControllerIndex { get; } Property Value int"
  },
  "api/Fantas.Input.ControllerInput.html": {
    "href": "api/Fantas.Input.ControllerInput.html",
    "title": "Class ControllerInput | Fantas",
    "keywords": "Class ControllerInput Namespace Fantas.Input Assembly Fantas.dll ControllerInput is used to manage/get the connected game controllers public static class ControllerInput Inheritance object ControllerInput Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties IgnoreAppleTVRemote On AppleTV iOS sends input of AppleTV Remote as Controller This flag allow to ignore the Remote as Game Controller public static bool IgnoreAppleTVRemote { get; set; } Property Value bool Methods GetController(int) Return a Controller at the given index public static Controller GetController(int index) Parameters index int index of the controller Returns Controller"
  },
  "api/Fantas.Input.ControllerThumbstickChangedEventArgs.html": {
    "href": "api/Fantas.Input.ControllerThumbstickChangedEventArgs.html",
    "title": "Class ControllerThumbstickChangedEventArgs | Fantas",
    "keywords": "Class ControllerThumbstickChangedEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data when thumbstick is changed public class ControllerThumbstickChangedEventArgs : EventArgs Inheritance object EventArgs ControllerThumbstickChangedEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ControllerThumbstickChangedEventArgs(Vector2, int) Initialize ControllerThumbstickChangedEventArgs public ControllerThumbstickChangedEventArgs(Vector2 position, int controllerIndex) Parameters position Vector2 controllerIndex int Properties ControllerIndex Controller Index public int ControllerIndex { get; set; } Property Value int ThumbstickValue Thumbstick position public Vector2 ThumbstickValue { get; } Property Value Vector2"
  },
  "api/Fantas.Input.ControllerTriggerChangedEventArgs.html": {
    "href": "api/Fantas.Input.ControllerTriggerChangedEventArgs.html",
    "title": "Class ControllerTriggerChangedEventArgs | Fantas",
    "keywords": "Class ControllerTriggerChangedEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data when trigger is changed public class ControllerTriggerChangedEventArgs : EventArgs Inheritance object EventArgs ControllerTriggerChangedEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ControllerTriggerChangedEventArgs(float, int) Initialize trigger changed event arguments public ControllerTriggerChangedEventArgs(float triggerValue, int controllerIndex) Parameters triggerValue float controllerIndex int Properties ControllerIndex Controller Index public int ControllerIndex { get; set; } Property Value int TriggerValue Trigger position. 0 not pressed 1 fully pressed public float TriggerValue { get; } Property Value float"
  },
  "api/Fantas.Input.Cursor.html": {
    "href": "api/Fantas.Input.Cursor.html",
    "title": "Class Cursor | Fantas",
    "keywords": "Class Cursor Namespace Fantas.Input Assembly Fantas.dll Mouse Cursor public class Cursor Inheritance object Cursor Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Fantas.Input.Cursors.html": {
    "href": "api/Fantas.Input.Cursors.html",
    "title": "Class Cursors | Fantas",
    "keywords": "Class Cursors Namespace Fantas.Input Assembly Fantas.dll Collection of different Cursor types public static class Cursors Inheritance object Cursors Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Arrow Default arrow cursor. public static Cursor Arrow { get; } Property Value Cursor ClosedHand Gets the closed hand cursor. public static Cursor ClosedHand { get; } Property Value Cursor Cross Gets the crosshair (+) cursor. public static Cursor Cross { get; } Property Value Cursor IBeam IBeam cursor that appears when the mouse is over text editing regions. public static Cursor IBeam { get; } Property Value Cursor No Cursor with invalid operation. public static Cursor No { get; } Property Value Cursor OpenHand Gets the open hand cursor. public static Cursor OpenHand { get; } Property Value Cursor PointingHand Gets the pointing hand cursor. (usually used when hover hyperlinks) public static Cursor PointingHand { get; } Property Value Cursor RotateBottomLeft Rotate on bottom left corner cursor public static Cursor RotateBottomLeft { get; } Property Value Cursor RotateBottomRight Rotate on bottom right corner cursor public static Cursor RotateBottomRight { get; } Property Value Cursor RotateTopLeft Rotate on top left corner cursor public static Cursor RotateTopLeft { get; } Property Value Cursor RotateTopRight Rotate on top right corner cursor public static Cursor RotateTopRight { get; } Property Value Cursor SizeAll Size cursor with arrows pointing all directions. public static Cursor SizeAll { get; } Property Value Cursor SizeNESW Gets the northeast-southwest ⤢ cursor. public static Cursor SizeNESW { get; } Property Value Cursor SizeNS Gets the north-south ↕ cursor. public static Cursor SizeNS { get; } Property Value Cursor SizeNWSE Gets the northwest-southeast ⤡ cursor public static Cursor SizeNWSE { get; } Property Value Cursor SizeWE Gets the horizontal west-east ↔ cursor public static Cursor SizeWE { get; } Property Value Cursor Wait Gets wait cursor ⧖ (Has no effect on Mac) On Mac the beach ball is displayed by the system when the application is not processing events public static Cursor Wait { get; } Property Value Cursor"
  },
  "api/Fantas.Input.KeyEventArgs.html": {
    "href": "api/Fantas.Input.KeyEventArgs.html",
    "title": "Class KeyEventArgs | Fantas",
    "keywords": "Class KeyEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data for Keyboard events public class KeyEventArgs : EventArgs Inheritance object EventArgs KeyEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors KeyEventArgs(Keys) Initialize Mouse event args public KeyEventArgs(Keys keyCode) Parameters keyCode Keys Properties KeyCode Keyboard key code for the KeyDown/KeyUp event public Keys KeyCode { get; } Property Value Keys"
  },
  "api/Fantas.Input.KeyboardInput.html": {
    "href": "api/Fantas.Input.KeyboardInput.html",
    "title": "Class KeyboardInput | Fantas",
    "keywords": "Class KeyboardInput Namespace Fantas.Input Assembly Fantas.dll Keyboard Input class public static class KeyboardInput Inheritance object KeyboardInput Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties AnyKeyPressed Check if any key was just pressed public static bool AnyKeyPressed { get; } Property Value bool AnyKeyReleased Check if any key was just released public static bool AnyKeyReleased { get; } Property Value bool Methods InvokeKeyDown(Keys) Invoke KeyDown event handlers public static void InvokeKeyDown(Keys keys) Parameters keys Keys InvokeKeyUp(Keys) Invoke KeyUp event handlers public static void InvokeKeyUp(Keys keyCode) Parameters keyCode Keys IsKeyDown(Keys) Check the if the given key from keyboard is down public static bool IsKeyDown(Keys keyCode) Parameters keyCode Keys Keyboard key (Q, W, A, S, Space, etc) Returns bool IsKeyPressed(Keys) Check the if the given key was just pressed public static bool IsKeyPressed(Keys keyCode) Parameters keyCode Keys Keyboard key (Q, W, A, S, Space, etc) Returns bool Return true if the key was just pressed IsKeyReleased(Keys) Check the if the given key was just released public static bool IsKeyReleased(Keys keyCode) Parameters keyCode Keys Keyboard key (Q, W, A, S, Space, etc) Returns bool Return true if the key was just released IsKeyUp(Keys) Check the if the given key from keyboard is up public static bool IsKeyUp(Keys keyCode) Parameters keyCode Keys Keyboard key (Q, W, A, S, Space, etc) Returns bool Return true if the key is not pressed"
  },
  "api/Fantas.Input.Keys.html": {
    "href": "api/Fantas.Input.Keys.html",
    "title": "Enum Keys | Fantas",
    "keywords": "Enum Keys Namespace Fantas.Input Assembly Fantas.dll Keyboard key codes public enum Keys Fields A = 65 A key. Add = 107 Add key. Apps = 93 Applications key. B = 66 B key. Back = 8 BACKSPACE key. Backslash = 226 The OEM angle bracket or backslash key on the RT 102 key keyboard. C = 67 C key. CapsLock = 20 CAPS LOCK key. CloseBrackets = 221 The OEM close bracket key on a US standard keyboard. Comma = 188 For any country/region, the ',' key. D = 68 D key. D0 = 48 D0 D1 = 49 Used for miscellaneous characters; it can vary by keyboard. D2 = 50 Used for miscellaneous characters; it can vary by keyboard. D3 = 51 Used for miscellaneous characters; it can vary by keyboard. D4 = 52 Used for miscellaneous characters; it can vary by keyboard. D5 = 53 Used for miscellaneous characters; it can vary by keyboard. D6 = 54 Used for miscellaneous characters; it can vary by keyboard. D7 = 55 Used for miscellaneous characters; it can vary by keyboard. D8 = 56 Used for miscellaneous characters; it can vary by keyboard. D9 = 57 Used for miscellaneous characters; it can vary by keyboard. Delete = 46 DEL key. Divide = 111 Divide key. Dot = 110 Dot key. Down = 40 DOWN ARROW key. E = 69 E key. End = 35 END key. Enter = 13 ENTER key. Escape = 27 ESC key. Execute = 43 EXECUTE key. F = 70 F key. F1 = 112 F1 key. F10 = 121 F10 key. F11 = 122 F11 key. F12 = 123 F12 key. F2 = 113 F2 key. F3 = 114 F3 key. F4 = 115 F4 key. F5 = 116 F5 key. F6 = 117 F6 key. F7 = 118 F7 key. F8 = 119 F8 key. F9 = 120 F9 key. G = 71 G key. H = 72 H key. Help = 47 HELP key. Home = 36 HOME key. I = 73 I key. Insert = 45 INS key. J = 74 J key. K = 75 K key. L = 76 L key. Left = 37 LEFT ARROW key. LeftAlt = 164 Left ALT key. LeftControl = 162 Left CONTROL key. LeftShift = 160 F13 key. LeftWindows = 91 Left Windows/Meta/Command key. M = 77 M key. Max = 227 Last key entry Multiply = 106 Multiply key. N = 78 N key. None = 0 Reserved. NumPad0 = 96 Numeric keypad 0 key. NumPad1 = 97 Numeric keypad 1 key. NumPad2 = 98 Numeric keypad 2 key. NumPad3 = 99 Numeric keypad 3 key. NumPad4 = 100 Numeric keypad 4 key. NumPad5 = 101 Numeric keypad 5 key. NumPad6 = 102 Numeric keypad 6 key. NumPad7 = 103 Numeric keypad 7 key. NumPad8 = 104 Numeric keypad 8 key. NumPad9 = 105 Numeric keypad 9 key. O = 79 O key. OemMinus = 189 For any country/region, the '-' key. OemPlus = 187 For any country/region, the '+' key. OpenBrackets = 219 The OEM open bracket key on a US standard keyboard. P = 80 P key. PageDown = 34 PAGE DOWN key. PageUp = 33 PAGE UP key. Pause = 19 PAUSE key. Period = 190 For any country/region, the '.' key. Pipe = 220 The OEM pipe key on a US standard keyboard. Print = 42 PRINT key. PrintScreen = 44 PRINT SCREEN key. Q = 81 Q key. Question = 191 The OEM question mark key on a US standard keyboard. Quotes = 222 The OEM singled/double quote key on a US standard keyboard. R = 82 R key. Right = 39 RIGHT ARROW key. RightAlt = 165 Right ALT key. RightControl = 163 Right CONTROL key. RightShift = 161 Right SHIFT key. RightWindows = 92 Right Windows/Meta/Command key. S = 83 S key. Select = 41 SELECT key. Semicolon = 186 The OEM Semicolon key on a US standard keyboard. Separator = 108 Separator key. Sleep = 95 Computer Sleep key. Space = 32 SPACE BAR key. Subtract = 109 Subtract key. T = 84 T key. Tab = 9 TAB key. Tilde = 192 The OEM tilde key on a US standard keyboard. U = 85 U key. Up = 38 UP ARROW key. V = 86 V key. VolumeDown = 174 Volume Down key. VolumeMute = 173 Volume Mute key. VolumeUp = 175 Volume Up key. W = 87 W key. X = 88 X key. Y = 89 Y key. Z = 90 Z key."
  },
  "api/Fantas.Input.MouseButtons.html": {
    "href": "api/Fantas.Input.MouseButtons.html",
    "title": "Enum MouseButtons | Fantas",
    "keywords": "Enum MouseButtons Namespace Fantas.Input Assembly Fantas.dll Mouse buttons [Flags] public enum MouseButtons Fields Left = 1 Left mouse button Middle = 4 Middle mouse button None = 0 None button Right = 2 Right mouse button X1 = 8 Extra button 1 X2 = 16 Extra button 2"
  },
  "api/Fantas.Input.MouseEventArgs.html": {
    "href": "api/Fantas.Input.MouseEventArgs.html",
    "title": "Class MouseEventArgs | Fantas",
    "keywords": "Class MouseEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data for Mouse events public class MouseEventArgs : EventArgs Inheritance object EventArgs MouseEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MouseEventArgs(MouseButtons, int, Vector2, PointF, bool) Initialize Mouse event args public MouseEventArgs(MouseButtons button, int clicks, Vector2 wheelDelta, PointF location, bool hasPreciseScrollingDeltas = false) Parameters button MouseButtons clicks int wheelDelta Vector2 location PointF hasPreciseScrollingDeltas bool Properties Button Button pressed or None if there was no button pressed public MouseButtons Button { get; } Property Value MouseButtons Clicks Total of times button was clicked public int Clicks { get; } Property Value int HasPreciseScrollingDeltas Used on Mac to detect if Wheel event have precise scroll values for instance when using touch pad scrolling public bool HasPreciseScrollingDeltas { get; } Property Value bool Location Cursor position on mouse event (Scene coordinates) public PointF Location { get; } Property Value PointF WheelDelta Mouse Wheel Delta public Vector2 WheelDelta { get; } Property Value Vector2"
  },
  "api/Fantas.Input.MouseInput.html": {
    "href": "api/Fantas.Input.MouseInput.html",
    "title": "Class MouseInput | Fantas",
    "keywords": "Class MouseInput Namespace Fantas.Input Assembly Fantas.dll Mouse Input class public static class MouseInput Inheritance object MouseInput Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties AnyButtonPressed True if any mouse button was just pressed public static bool AnyButtonPressed { get; } Property Value bool AnyButtonReleased True if any mouse button was just released public static bool AnyButtonReleased { get; } Property Value bool Cursor Current mouse cursor public static Cursor Cursor { get; set; } Property Value Cursor CursorPosition Get last cursor position (in Scene coordinates) public static PointF CursorPosition { get; } Property Value PointF IsCursorVisible Show/Hide the mouse cursor public static bool IsCursorVisible { get; set; } Property Value bool IsLeftButtonDown Return true if the left mouse button is current pressed public static bool IsLeftButtonDown { get; } Property Value bool IsLeftButtonPressed Return true if the left mouse button was just pressed public static bool IsLeftButtonPressed { get; } Property Value bool IsLeftButtonReleased Return true if the left mouse button was just released public static bool IsLeftButtonReleased { get; } Property Value bool IsMiddleButtonDown Return true if the middle mouse button is current pressed public static bool IsMiddleButtonDown { get; } Property Value bool IsMiddleButtonPressed Return true if the middle mouse button was just pressed public static bool IsMiddleButtonPressed { get; } Property Value bool IsMiddleButtonReleased Return true if the middle mouse button was just released public static bool IsMiddleButtonReleased { get; } Property Value bool IsNodeEventsEnabled Enable/Disable mouse node events MouseEnter/MouseHover/MouseLeave/Click public static bool IsNodeEventsEnabled { get; set; } Property Value bool IsRightButtonDown Return true if the right mouse button is current pressed public static bool IsRightButtonDown { get; } Property Value bool IsRightButtonPressed Return true if the right mouse button was just pressed public static bool IsRightButtonPressed { get; } Property Value bool IsRightButtonReleased Return true if the right mouse button was just released public static bool IsRightButtonReleased { get; } Property Value bool IsXButton1Down Return true if the X1 mouse button is current pressed public static bool IsXButton1Down { get; } Property Value bool IsXButton1Pressed Return true if the X1 mouse button was just pressed public static bool IsXButton1Pressed { get; } Property Value bool IsXButton1Released Return true if the X1 mouse button was just released public static bool IsXButton1Released { get; } Property Value bool IsXButton2Down Return true if the X2 mouse button is current pressed public static bool IsXButton2Down { get; } Property Value bool IsXButton2Pressed Return true if the X2 mouse button was just pressed public static bool IsXButton2Pressed { get; } Property Value bool IsXButton2Released Return true if the X2 mouse button was just released public static bool IsXButton2Released { get; } Property Value bool WheelDelta Get last mouse wheel delta value public static Vector2 WheelDelta { get; } Property Value Vector2 Methods InvokeMouseDown(MouseButtons, PointF, int) Invoke MouseDown event handlers public static void InvokeMouseDown(MouseButtons button, PointF position, int clicks) Parameters button MouseButtons position PointF clicks int InvokeMouseDrag(MouseButtons, PointF, int) Invoke Drag event handlers public static void InvokeMouseDrag(MouseButtons button, PointF position, int clicks) Parameters button MouseButtons position PointF clicks int InvokeMouseMove(PointF) Invoke MouseMove event handlers public static void InvokeMouseMove(PointF position) Parameters position PointF InvokeMouseUp(MouseButtons, PointF, int) Invoke MouseUp event handlers public static void InvokeMouseUp(MouseButtons button, PointF position, int clicks) Parameters button MouseButtons position PointF clicks int InvokeMouseWheel(Vector2, PointF, bool) Invoke MouseWheel event handlers public static void InvokeMouseWheel(Vector2 delta, PointF position, bool hasPreciseScrollingDeltas) Parameters delta Vector2 position PointF hasPreciseScrollingDeltas bool PopCursor() Restore the previous cursor public static void PopCursor() PushCursor(Cursor) Set the new cursor and push the current one on the stack public static void PushCursor(Cursor cursor) Parameters cursor Cursor"
  },
  "api/Fantas.Input.PanEventArgs.html": {
    "href": "api/Fantas.Input.PanEventArgs.html",
    "title": "Class PanEventArgs | Fantas",
    "keywords": "Class PanEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data for Pan event public class PanEventArgs : EventArgs Inheritance object EventArgs PanEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PanEventArgs(PointF) Initialize Pan event args public PanEventArgs(PointF location) Parameters location PointF Properties Location Cursor position on pan event (Scene coordinates) public PointF Location { get; } Property Value PointF"
  },
  "api/Fantas.Input.PinchEventArgs.html": {
    "href": "api/Fantas.Input.PinchEventArgs.html",
    "title": "Class PinchEventArgs | Fantas",
    "keywords": "Class PinchEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data for Pinch event public class PinchEventArgs : EventArgs Inheritance object EventArgs PinchEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PinchEventArgs(PointF, PointF, float) Initialize Pinch event args public PinchEventArgs(PointF location1, PointF location2, float scale) Parameters location1 PointF location2 PointF scale float Properties Location1 Location 1 of pinch public PointF Location1 { get; } Property Value PointF Location2 Location 2 of pinch public PointF Location2 { get; } Property Value PointF Scale Scale factor of the pinch gesture public float Scale { get; } Property Value float"
  },
  "api/Fantas.Input.SwipeDirection.html": {
    "href": "api/Fantas.Input.SwipeDirection.html",
    "title": "Enum SwipeDirection | Fantas",
    "keywords": "Enum SwipeDirection Namespace Fantas.Input Assembly Fantas.dll Touch Swipe Direction [Flags] public enum SwipeDirection Fields Down = 8 Down Left = 2 Left None = 0 None Right = 1 Right Up = 4 Up"
  },
  "api/Fantas.Input.SwipeEventArgs.html": {
    "href": "api/Fantas.Input.SwipeEventArgs.html",
    "title": "Class SwipeEventArgs | Fantas",
    "keywords": "Class SwipeEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data for Swipe event public class SwipeEventArgs : EventArgs Inheritance object EventArgs SwipeEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SwipeEventArgs(SwipeDirection, Vector2) Initialize Swipe event args public SwipeEventArgs(SwipeDirection direction, Vector2 delta) Parameters direction SwipeDirection delta Vector2 Properties Delta The direction of swipe public Vector2 Delta { get; } Property Value Vector2 Direction The direction of swipe public SwipeDirection Direction { get; } Property Value SwipeDirection"
  },
  "api/Fantas.Input.TapEventArgs.html": {
    "href": "api/Fantas.Input.TapEventArgs.html",
    "title": "Class TapEventArgs | Fantas",
    "keywords": "Class TapEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data for Tap event public class TapEventArgs : EventArgs Inheritance object EventArgs TapEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TapEventArgs(PointF) Initialize Tap event args public TapEventArgs(PointF location) Parameters location PointF Properties Location Cursor position on tap event (Scene coordinates) public PointF Location { get; } Property Value PointF"
  },
  "api/Fantas.Input.TouchDevice.html": {
    "href": "api/Fantas.Input.TouchDevice.html",
    "title": "Enum TouchDevice | Fantas",
    "keywords": "Enum TouchDevice Namespace Fantas.Input Assembly Fantas.dll Touch Device type (Touch, Mouse, Pen) public enum TouchDevice Fields Mouse = 0 Mouse pointer event Pen = 2 Pen Touch = 1 Touch contact"
  },
  "api/Fantas.Input.TouchEventArgs.html": {
    "href": "api/Fantas.Input.TouchEventArgs.html",
    "title": "Class TouchEventArgs | Fantas",
    "keywords": "Class TouchEventArgs Namespace Fantas.Input Assembly Fantas.dll Event data for Touch events public class TouchEventArgs : EventArgs Inheritance object EventArgs TouchEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TouchEventArgs(TouchInfo) Initialize Touch event args public TouchEventArgs(TouchInfo touchInfo) Parameters touchInfo TouchInfo Properties TouchInfo Touch data information public TouchInfo TouchInfo { get; } Property Value TouchInfo"
  },
  "api/Fantas.Input.TouchInfo.html": {
    "href": "api/Fantas.Input.TouchInfo.html",
    "title": "Class TouchInfo | Fantas",
    "keywords": "Class TouchInfo Namespace Fantas.Input Assembly Fantas.dll Contains information about Touch like location, pressure public sealed class TouchInfo : IEquatable<TouchInfo> Inheritance object TouchInfo Implements IEquatable<TouchInfo> Inherited Members object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors TouchInfo(int, TouchState, PointF, TouchDevice, float, float) Create a TouchInfo public TouchInfo(int id, TouchState state, PointF location, TouchDevice device, float pressure, float rotation) Parameters id int state TouchState location PointF device TouchDevice pressure float rotation float Properties Device TouchDevice type (Touch, Mouse, Pen) public TouchDevice Device { get; } Property Value TouchDevice Id Touch id number public int Id { get; } Property Value int Location Location of the touch, in Screen coordinates public PointF Location { get; } Property Value PointF Pressure Get the touch pressure (if available) 0f pressure not available 0.5f - normal pressure 1f - high pressure public float Pressure { get; } Property Value float Rotation Get touch rotation if available public float Rotation { get; } Property Value float State Current touch state (Down, Move, Up) public TouchState State { get; } Property Value TouchState Methods Equals(TouchInfo) Check if this TouchInfo is equal to the other public bool Equals(TouchInfo other) Parameters other TouchInfo Returns bool Equals(object) object Equals public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() object GetHashCode public override int GetHashCode() Returns int"
  },
  "api/Fantas.Input.TouchInput.html": {
    "href": "api/Fantas.Input.TouchInput.html",
    "title": "Class TouchInput | Fantas",
    "keywords": "Class TouchInput Namespace Fantas.Input Assembly Fantas.dll Touch Input (TouchScreen devices) public static class TouchInput Inheritance object TouchInput Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties AnyTouch Check if there is any Touch event just happened public static bool AnyTouch { get; } Property Value bool True if there are any touches in the Down or Moved state, false otherwise AnyTouchDown Check if there is any TouchDown event that just happened public static bool AnyTouchDown { get; } Property Value bool AnyTouchUp Check if there is any TouchUp event that just happened public static bool AnyTouchUp { get; } Property Value bool IsDoubleTapEnabled Enable/Disable Double Tap gesture public static bool IsDoubleTapEnabled { get; set; } Property Value bool IsLongPressEnabled Enable/Disable Long Press gesture public static bool IsLongPressEnabled { get; set; } Property Value bool IsNodeEventsEnabled Enable/Disable touch/gesture node events Tap/DoubleTap/LongPress/TouchUpInside public static bool IsNodeEventsEnabled { get; set; } Property Value bool IsPanEnabled Enable/Disable Pan gesture public static bool IsPanEnabled { get; set; } Property Value bool IsPinchEnabled Enable/Disable Pinch gesture public static bool IsPinchEnabled { get; set; } Property Value bool IsSwipeEnabled Enable/Disable Swipe gesture public static bool IsSwipeEnabled { get; set; } Property Value bool IsTapEnabled Enable/Disable Tap gesture public static bool IsTapEnabled { get; set; } Property Value bool Touches Get current frame touches information public static TouchInfo[] Touches { get; } Property Value TouchInfo[] Methods DisableGestures() Disable All Touch gestures public static void DisableGestures() InvokeDoubleTap(PointF) Invoke DoubleTap event handlers public static void InvokeDoubleTap(PointF location) Parameters location PointF InvokeLongPress(PointF) Invoke LongPress event handlers public static void InvokeLongPress(PointF location) Parameters location PointF InvokeTap(PointF) Invoke Tap event handlers public static void InvokeTap(PointF location) Parameters location PointF InvokeTouchDown(TouchInfo) Invoke TouchDown handlers public static void InvokeTouchDown(TouchInfo touchInfo) Parameters touchInfo TouchInfo InvokeTouchMove(TouchInfo) Invoke TouchMove handlers public static void InvokeTouchMove(TouchInfo touchInfo) Parameters touchInfo TouchInfo InvokeTouchUp(TouchInfo) Invoke TouchUp handlers public static void InvokeTouchUp(TouchInfo touchInfo) Parameters touchInfo TouchInfo ResetTouch() Reset Touch buffer (used by tests) public static void ResetTouch()"
  },
  "api/Fantas.Input.TouchState.html": {
    "href": "api/Fantas.Input.TouchState.html",
    "title": "Enum TouchState | Fantas",
    "keywords": "Enum TouchState Namespace Fantas.Input Assembly Fantas.dll Touch state (Down, Up, Moved) public enum TouchState Fields Down = 2 Touch just started, pressed. Invalid = 0 Invalid touch Moved = 1 Touch moved. Up = 3 Touch finish, released"
  },
  "api/Fantas.Input.html": {
    "href": "api/Fantas.Input.html",
    "title": "Namespace Fantas.Input | Fantas",
    "keywords": "Namespace Fantas.Input Classes Controller Controller represent one physical GamePad attached to the system ControllerButtonEventArgs Event data when button is pressed/released ControllerChangedEventArgs Event data when a controller is added or removed ControllerInput ControllerInput is used to manage/get the connected game controllers ControllerThumbstickChangedEventArgs Event data when thumbstick is changed ControllerTriggerChangedEventArgs Event data when trigger is changed Cursor Mouse Cursor Cursors Collection of different Cursor types KeyEventArgs Event data for Keyboard events KeyboardInput Keyboard Input class MouseEventArgs Event data for Mouse events MouseInput Mouse Input class PanEventArgs Event data for Pan event PinchEventArgs Event data for Pinch event SwipeEventArgs Event data for Swipe event TapEventArgs Event data for Tap event TouchEventArgs Event data for Touch events TouchInfo Contains information about Touch like location, pressure TouchInput Touch Input (TouchScreen devices) Enums ControllerButtons Defines the buttons on gamepad. Keys Keyboard key codes MouseButtons Mouse buttons SwipeDirection Touch Swipe Direction TouchDevice Touch Device type (Touch, Mouse, Pen) TouchState Touch state (Down, Up, Moved)"
  },
  "api/Fantas.LabelHorizontalAlignmentMode.html": {
    "href": "api/Fantas.LabelHorizontalAlignmentMode.html",
    "title": "Enum LabelHorizontalAlignmentMode | Fantas",
    "keywords": "Enum LabelHorizontalAlignmentMode Namespace Fantas Assembly Fantas.dll Label text horizontal alignment public enum LabelHorizontalAlignmentMode Fields Center = 0 Align text horizontally on center Left = 1 Align text horizontally to left side Right = 2 Align text horizontally to right side"
  },
  "api/Fantas.LabelNode.html": {
    "href": "api/Fantas.LabelNode.html",
    "title": "Class LabelNode | Fantas",
    "keywords": "Class LabelNode Namespace Fantas Assembly Fantas.dll Node that contains a text public class LabelNode : Node Inheritance object Node LabelNode Inherited Members Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Width Node.Height Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors LabelNode() Creates an empty Label node public LabelNode() LabelNode(LabelNode) Copy an label node public LabelNode(LabelNode other) Parameters other LabelNode LabelNode(string) Creates label with text public LabelNode(string text) Parameters text string Properties BlendMode Set the blend operation for the Sprite node public BlendMode BlendMode { get; set; } Property Value BlendMode BottomColor Label text bottom color public Color BottomColor { get; set; } Property Value Color BottomSecondaryColor Label text secondary bottom color public Color BottomSecondaryColor { get; set; } Property Value Color Color Label text color public Color Color { get; set; } Property Value Color ColorBlendFactor Color blend factor (0-1) public float ColorBlendFactor { get; set; } Property Value float Font Label font public Font Font { get; set; } Property Value Font HorizontalAlignmentMode Text label horizontal alignment mode public LabelHorizontalAlignmentMode HorizontalAlignmentMode { get; set; } Property Value LabelHorizontalAlignmentMode MaxLength Maximum number of character in the LabelNode public int MaxLength { get; set; } Property Value int Outline Enable/Disable outline for Label public bool Outline { get; set; } Property Value bool OutlineBottomColor Outline bottom color public Color OutlineBottomColor { get; set; } Property Value Color OutlineBottomSecondaryColor Outline bottom secondary color public Color OutlineBottomSecondaryColor { get; set; } Property Value Color OutlineColor Outline Color public Color OutlineColor { get; set; } Property Value Color OutlineColorBlendFactor Outline color blend factor public float OutlineColorBlendFactor { get; set; } Property Value float OutlineDelta Change the outline delta distance public float OutlineDelta { get; set; } Property Value float OutlineFlags Change which sides has outline public OutlinePosition OutlineFlags { get; set; } Property Value OutlinePosition OutlineOffset Change the offset distance for the outline (can be as shadow) public Vector2 OutlineOffset { get; set; } Property Value Vector2 OutlineSecondaryColor Outline secondary color public Color OutlineSecondaryColor { get; set; } Property Value Color OutlineTopColor Outline top color public Color OutlineTopColor { get; set; } Property Value Color OutlineTopSecondaryColor Outline top secondary color public Color OutlineTopSecondaryColor { get; set; } Property Value Color PreferredWidth Preferred label width, when set the LabelNode will wrap the words public float PreferredWidth { get; set; } Property Value float SecondaryColor Secondary Color (to be blend using ColorBlendFactor) public Color SecondaryColor { get; set; } Property Value Color Text Label text public string Text { get; set; } Property Value string TopColor Label text top color public Color TopColor { get; set; } Property Value Color TopSecondaryColor Label text top secondary color public Color TopSecondaryColor { get; set; } Property Value Color VerticalAlignmentMode Text label horizontal alignment mode public LabelVerticalAlignmentMode VerticalAlignmentMode { get; set; } Property Value LabelVerticalAlignmentMode Methods Copy() Copy label protected override Node Copy() Returns Node"
  },
  "api/Fantas.LabelVerticalAlignmentMode.html": {
    "href": "api/Fantas.LabelVerticalAlignmentMode.html",
    "title": "Enum LabelVerticalAlignmentMode | Fantas",
    "keywords": "Enum LabelVerticalAlignmentMode Namespace Fantas Assembly Fantas.dll Label text vertical alignment public enum LabelVerticalAlignmentMode Fields Baseline = 0 Align text using the baseline Bottom = 3 Align text using bottom of text frame Center = 1 Align text using center of text frame Top = 2 Align text using top of text frame"
  },
  "api/Fantas.MathClamp.html": {
    "href": "api/Fantas.MathClamp.html",
    "title": "Class MathClamp | Fantas",
    "keywords": "Class MathClamp Namespace Fantas Assembly Fantas.dll Contains helper methods for doing Lerp to make it easier port games from MonoGame to Fantas Some methods imported from XNA/MonoGame MathHelper https://github.com/MonoGame/MonoGame/blob/develop/MonoGame.Framework/MathHelper.cs public static class MathClamp Inheritance object MathClamp Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Clamp(double, double, double) Restricts a value to be within a specified range. public static double Clamp(double value, double min, double max) Parameters value double The value to clamp. min double The minimum value. If value is less than min, min will be returned. max double The maximum value. If value is greater than max, max will be returned. Returns double The clamped value. Clamp(int, int, int) Restricts a value to be within a specified range. public static int Clamp(int value, int min, int max) Parameters value int The value to clamp. min int The minimum value. If value is less than min, min will be returned. max int The maximum value. If value is greater than max, max will be returned. Returns int The clamped value. Clamp(float, float, float) Restricts a value to be within a specified range. public static float Clamp(float value, float min, float max) Parameters value float The value to clamp. min float The minimum value. If value is less than min, min will be returned. max float The maximum value. If value is greater than max, max will be returned. Returns float The clamped value."
  },
  "api/Fantas.MathLerp.html": {
    "href": "api/Fantas.MathLerp.html",
    "title": "Class MathLerp | Fantas",
    "keywords": "Class MathLerp Namespace Fantas Assembly Fantas.dll Contains helper methods for doing Lerp to make it easier port games from MonoGame to Fantas Some methods imported from XNA/MonoGame MathHelper https://github.com/MonoGame/MonoGame/blob/develop/MonoGame.Framework/MathHelper.cs public static class MathLerp Inheritance object MathLerp Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Lerp(double, double, double) Linearly interpolates between two values. public static double Lerp(double value1, double value2, double amount) Parameters value1 double Source value. value2 double Destination value. amount double Value between 0 and 1 indicating the weight of value2. Returns double Interpolated value. Lerp(float, float, float) Linearly interpolates between two values. public static float Lerp(float value1, float value2, float amount) Parameters value1 float Source value. value2 float Destination value. amount float Value between 0 and 1 indicating the weight of value2. Returns float Interpolated value."
  },
  "api/Fantas.Node.html": {
    "href": "api/Fantas.Node.html",
    "title": "Class Node | Fantas",
    "keywords": "Class Node Namespace Fantas Assembly Fantas.dll Base Node for other Nodes public class Node Inheritance object Node Derived CameraNode CropNode LabelNode ParticleEmitterNode Scene ShapeNode SpriteNode SpritePolylineNode TileMapNode Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Node() Create a generic node Usually used as parent for other nodes public Node() Node(Node) Copy the node public Node(Node other) Parameters other Node Properties Alpha Transparency applied to the node and children's public float Alpha { get; set; } Property Value float Bottom Bottom side of Node frame NOTICE: The Bottom of frame is different from node.Frame.Bottom, this happens because System.Drawing.Rectangle assumes Top is always lower than Bottom (when set, will move the node position without affect the size) public float Bottom { get; set; } Property Value float CanBringForward True if node can be brought forward among siblings public bool CanBringForward { get; } Property Value bool CanSendBackward True if node can be sent backward among siblings public bool CanSendBackward { get; } Property Value bool Center Center location of Node public PointF Center { get; set; } Property Value PointF Children Children add to this node public Node[] Children { get; } Property Value Node[] Cursor Custom mouse cursor for node public Cursor Cursor { get; set; } Property Value Cursor Frame Node Frame without children public RectangleF Frame { get; } Property Value RectangleF HasAnimation Check if not is running animations public bool HasAnimation { get; } Property Value bool HasChildren Return whether this node has children public bool HasChildren { get; } Property Value bool HasParent Return whether this node has children public bool HasParent { get; } Property Value bool Height Node height public float Height { get; } Property Value float Hidden Node visibility (when is hidden) public bool Hidden { get; set; } Property Value bool IsHitTestEnabled Flag to control if Node can be hit-test by Mouse/Touch node events public bool IsHitTestEnabled { get; set; } Property Value bool IsMouseOver True if the mouse cursor position is over the node public bool IsMouseOver { get; } Property Value bool IsTouchOver True if Node is current being touch public bool IsTouchOver { get; } Property Value bool Left Left side of Node frame (when set, will move the node position without affect the size) public float Left { get; set; } Property Value float MouseButtonPressed Mouse button that was pressed over the node public MouseButtons MouseButtonPressed { get; } Property Value MouseButtons Name optional name of the node public string Name { get; set; } Property Value string Parent Parent node public Node Parent { get; } Property Value Node Paused Pause animation of node (and children) public bool Paused { get; set; } Property Value bool PhysicsBody PhysicsBody of node. public PhysicsBody PhysicsBody { get; set; } Property Value PhysicsBody Position Position relative to the parent node public PointF Position { get; set; } Property Value PointF Right Right side of Node frame (when set, will move the node position without affect the size) public float Right { get; set; } Property Value float Scale Node scale factor public Vector2 Scale { get; set; } Property Value Vector2 Scene Get the scene the node was added public Scene Scene { get; } Property Value Scene Speed Controls the animation speed of node (and children) public float Speed { get; set; } Property Value float Tag User defined value to store custom information about this node. public object Tag { get; set; } Property Value object Top Top side of Node frame NOTICE: The Top of frame is different from node.Frame.Top, this happens because System.Drawing.Rectangle assumes Top is always lower than Bottom (when set, will move the node position without affect the size) public float Top { get; set; } Property Value float TouchCount Total of current touches within the Node frame public int TouchCount { get; } Property Value int Width Node width public float Width { get; } Property Value float X X position of Node public float X { get; set; } Property Value float XScale X scale factor public float XScale { get; set; } Property Value float Y Y position of Node public float Y { get; set; } Property Value float YScale Y scale factor public float YScale { get; set; } Property Value float ZPosition Node Z offset (0-bottom, + closer to camera) public float ZPosition { get; set; } Property Value float ZRotation Z-rotation (euler angle) using anchor as pivot public double ZRotation { get; set; } Property Value double Methods AddChild(Node) Add a new child node public void AddChild(Node child) Parameters child Node BringForward() Move node forward inside parent children public void BringForward() BringToFront() Move node to the front in the among siblings public void BringToFront() CalculateAccumulatedFrame() Calculate the frame of this node and all children public RectangleF CalculateAccumulatedFrame() Returns RectangleF ContainsPoint(PointF) Check if the point is inside the node frame public bool ContainsPoint(PointF point) Parameters point PointF point in parent coordinates Returns bool Return true if the node frame contains the point ConvertPointFromNode(PointF, Node) Transform point from the from source node to this node public PointF ConvertPointFromNode(PointF point, Node sourceNode) Parameters point PointF point in reference parent coordinates sourceNode Node reference to be converted Returns PointF Return point converted from reference ConvertPointToNode(PointF, Node) Transform point from the from this node to another node public PointF ConvertPointToNode(PointF point, Node toNode) Parameters point PointF point in parent coordinates toNode Node Node to be used as reference Returns PointF Return point converted to reference node Copy() Copy this node protected virtual Node Copy() Returns Node GetAnimationForKey(string) Get the animation for the key public Animation GetAnimationForKey(string key) Parameters key string Key used on RunAnimation Returns Animation Return the animation associated with key or null if wasn't found GetChildNode(string) Search a child node with the given name public Node GetChildNode(string childName) Parameters childName string name of child Returns Node Return node with the given name, or null if wasn't found GetNodeAtPoint(PointF) Get the top visible node from the point public Node GetNodeAtPoint(PointF point) Parameters point PointF Returns Node Return the first visible node that intersect the point GetNodesAtPoint(PointF) Get the list of visible nodes at the point public Node[] GetNodesAtPoint(PointF point) Parameters point PointF point in parent coordinates Returns Node[] List of node that intersect the point InParentHierarchy(Node) Check if the node is in the hierarchy under other node public bool InParentHierarchy(Node other) Parameters other Node Returns bool InsertChild(int, Node) Insert a child into the index position public void InsertChild(int index, Node child) Parameters index int Index of child child Node Child to be inserted IntersectsNode(Node) Check if one node overlaps with the other public bool IntersectsNode(Node other) Parameters other Node Other node Returns bool Return true if node frame intersects with other node frame MoveToParent(Node) Change node parent public void MoveToParent(Node newParent) Parameters newParent Node Offset(Vector2) Offset node to a new position public void Offset(Vector2 delta) Parameters delta Vector2 Offset(float, float) Offset node to a new position public void Offset(float x, float y) Parameters x float delta added to X position y float delta added to Y position OffsetX(float) Offset node horizontally public void OffsetX(float delta) Parameters delta float OffsetY(float) Offset node vertically public void OffsetY(float delta) Parameters delta float OnClick(MouseEventArgs) Called when mouse left button clicked within the children node (called after left button down, left button up) call back contains the node clicked and the point (scene coordinates) Don't override from Scene, use OnMouseButtonDown instead public virtual void OnClick(MouseEventArgs args) Parameters args MouseEventArgs OnDoubleClick(MouseEventArgs) Called when mouse left button double-clicked within the children node call back contains the node clicked and the point (scene coordinates) public virtual void OnDoubleClick(MouseEventArgs args) Parameters args MouseEventArgs OnDoubleTap(TapEventArgs) Called when double tap within the children node call back contains the node clicked and the point (scene coordinates) public virtual void OnDoubleTap(TapEventArgs args) Parameters args TapEventArgs OnLongPress(TapEventArgs) Called when tap and hold (long press) the children node call back contains the node clicked and the point (scene coordinates) public virtual void OnLongPress(TapEventArgs args) Parameters args TapEventArgs OnMouseDown(MouseEventArgs) Called when mouse left button is pressed over the children node call back contains the node clicked and the point (scene coordinates) public virtual void OnMouseDown(MouseEventArgs args) Parameters args MouseEventArgs OnMouseEnter() Called when mouse enter children node frame call back contains the node clicked and the point (scene coordinates) This event wont be triggered for Scene, only for children nodes public virtual void OnMouseEnter() OnMouseHover() Called when mouse move over children node call back contains the node clicked and the point (scene coordinates) This event wont be triggered for Scene, only for children nodes public virtual void OnMouseHover() OnMouseLeave() Called when mouse leave node call back contains the node clicked and the point (scene coordinates) This event wont be triggered for Scene, only for children nodes public virtual void OnMouseLeave() OnMouseUp(MouseEventArgs) Called when mouse left button is released over the children node call back contains the node clicked and the point (scene coordinates) public virtual void OnMouseUp(MouseEventArgs args) Parameters args MouseEventArgs OnTap(TapEventArgs) Called when tap within the children node call back contains the node clicked and the point (scene coordinates) public virtual void OnTap(TapEventArgs args) Parameters args TapEventArgs OnTouchDownInside(TouchEventArgs) Called when user start a touch within the Node bounds public virtual void OnTouchDownInside(TouchEventArgs args) Parameters args TouchEventArgs OnTouchDragEnter(TouchEventArgs) Called when touch is dragged inside back of node frame public virtual void OnTouchDragEnter(TouchEventArgs args) Parameters args TouchEventArgs OnTouchDragExit(TouchEventArgs) Called when touch is dragged outside of node frame public virtual void OnTouchDragExit(TouchEventArgs args) Parameters args TouchEventArgs OnTouchDragInside(TouchEventArgs) Called when touch is dragged within the Node frame public virtual void OnTouchDragInside(TouchEventArgs args) Parameters args TouchEventArgs OnTouchDragOutside(TouchEventArgs) Called when touch is dragged outside the Node frame (after it start a TouchUpInside operation) public virtual void OnTouchDragOutside(TouchEventArgs args) Parameters args TouchEventArgs OnTouchUpInside(TouchEventArgs) Called on touch up within the Node frame public virtual void OnTouchUpInside(TouchEventArgs args) Parameters args TouchEventArgs OnTouchUpOutside(TouchEventArgs) Called on touch up outside the Node frame public virtual void OnTouchUpOutside(TouchEventArgs args) Parameters args TouchEventArgs RemoveAllAnimations() Remove all animations from node public void RemoveAllAnimations() RemoveAllChildren() Remove all children from node public void RemoveAllChildren() RemoveAnimationForKey(string) Remove all animations with the given key public void RemoveAnimationForKey(string key) Parameters key string Key used on RunAnimation RemoveChild(Node) Remove a single child from node public void RemoveChild(Node child) Parameters child Node RemoveChildren(Node[]) Remove a list of children from this node public void RemoveChildren(Node[] toRemove) Parameters toRemove Node[] RemoveFromParent() Remove node from parent public void RemoveFromParent() RenderToTexture() Render node to a Texture public Texture RenderToTexture() Returns Texture Return a Texture object with the rendered contents of node RunAnimation(Animation) Adds an animation to the list of actions executed by the node. public void RunAnimation(Animation animation) Parameters animation Animation animation to be executed RunAnimation(Animation, Action) Adds an animation to the list of actions executed by the node. And runs the completion handler when the animation is done public void RunAnimation(Animation animation, Action completionHandler) Parameters animation Animation animation to be executed completionHandler Action RunAnimation(Animation, string) Adds an animation (with a key) to the list of actions executed by the node, public void RunAnimation(Animation animation, string key) Parameters animation Animation animation to be executed key string RunAnimationAsync(Animation) Create a task to add a animation to the node public Task RunAnimationAsync(Animation animation) Parameters animation Animation Return a Task Returns Task SendBackward() Move node backward inside parent children public void SendBackward() SendToBack() Move node to the back inside parent children public void SendToBack() SetScale(Vector2) public void SetScale(Vector2 scale) Parameters scale Vector2 SetScale(float) Set X/Y scale public void SetScale(float scale) Parameters scale float New scale ToString() Display node as string public override string ToString() Returns string String representation of node Events Click Called when mouse left button clicked within the children node (called after left button down, left button up) call back contains the node clicked and the point (scene coordinates) public event EventHandler<MouseEventArgs> Click Event Type EventHandler<MouseEventArgs> DoubleClick Called when mouse left button double-clicked within the children node call back contains the node clicked and the point (scene coordinates) public event EventHandler<MouseEventArgs> DoubleClick Event Type EventHandler<MouseEventArgs> DoubleTap Called when node frame is double tapped call back contains the node tapped and the point (scene coordinates) public event EventHandler<TapEventArgs> DoubleTap Event Type EventHandler<TapEventArgs> LongPress Called when node frame is pressed and hold (long press) call back contains the node tapped and the point (scene coordinates) public event EventHandler<TapEventArgs> LongPress Event Type EventHandler<TapEventArgs> MouseDown Called when mouse left button is pressed over the children node call back contains the node clicked and the point (scene coordinates) public event EventHandler<MouseEventArgs> MouseDown Event Type EventHandler<MouseEventArgs> MouseEnter Called when mouse enter children node frame call back contains the node clicked and the point (scene coordinates) public event EventHandler MouseEnter Event Type EventHandler MouseHover Called when mouse move over children node call back contains the node clicked and the point (scene coordinates) public event EventHandler MouseHover Event Type EventHandler MouseLeave Called when mouse leave node call back contains the children node clicked and the point (scene coordinates) public event EventHandler MouseLeave Event Type EventHandler MouseUp Called when mouse left button is released over the children node call back contains the node clicked and the point (scene coordinates) public event EventHandler<MouseEventArgs> MouseUp Event Type EventHandler<MouseEventArgs> Tap Called when node frame is tapped call back contains the node tapped and the point (scene coordinates) public event EventHandler<TapEventArgs> Tap Event Type EventHandler<TapEventArgs> TouchDownInside Called when touch event starts within the Node frame public event EventHandler<TouchEventArgs> TouchDownInside Event Type EventHandler<TouchEventArgs> TouchDragEnter Called when touch is dragged inside back of node frame public event EventHandler<TouchEventArgs> TouchDragEnter Event Type EventHandler<TouchEventArgs> TouchDragExit Called when touch is dragged outside of node frame public event EventHandler<TouchEventArgs> TouchDragExit Event Type EventHandler<TouchEventArgs> TouchDragInside Called when touch is dragged within the Node frame public event EventHandler<TouchEventArgs> TouchDragInside Event Type EventHandler<TouchEventArgs> TouchDragOutside Called when touch is dragged outside the Node frame (after it start a TouchUpInside operation) public event EventHandler<TouchEventArgs> TouchDragOutside Event Type EventHandler<TouchEventArgs> TouchUpInside Called on touch up within the Node frame public event EventHandler<TouchEventArgs> TouchUpInside Event Type EventHandler<TouchEventArgs> TouchUpOutside Called on touch up outside the Node frame public event EventHandler<TouchEventArgs> TouchUpOutside Event Type EventHandler<TouchEventArgs>"
  },
  "api/Fantas.OutlinePosition.html": {
    "href": "api/Fantas.OutlinePosition.html",
    "title": "Enum OutlinePosition | Fantas",
    "keywords": "Enum OutlinePosition Namespace Fantas Assembly Fantas.dll Outline Position Flags [Flags] public enum OutlinePosition Fields All = TopLeft | Top | TopRight | Right | BottomRight | Bottom | BottomLeft | Left Bottom = 32 Bottom BottomLeft = 64 BottomLeft BottomRight = 16 BottomRight Left = 128 Left None = 0 No outline Right = 8 Right Top = 2 Top TopLeft = 1 TopLeft outline TopRight = 4 TopRight"
  },
  "api/Fantas.ParticleEmitterNode.html": {
    "href": "api/Fantas.ParticleEmitterNode.html",
    "title": "Class ParticleEmitterNode | Fantas",
    "keywords": "Class ParticleEmitterNode Namespace Fantas Assembly Fantas.dll Node that emit particles (like fire, smoke, explosion) public class ParticleEmitterNode : Node Inheritance object Node ParticleEmitterNode Inherited Members Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Width Node.Height Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ParticleEmitterNode() Create a particle emitter public ParticleEmitterNode() ParticleEmitterNode(ParticleEmitterNode) Create a particle emitter public ParticleEmitterNode(ParticleEmitterNode other) Parameters other ParticleEmitterNode Properties EmissionAngle Initial direction of particle public double EmissionAngle { get; set; } Property Value double EmissionAngleRange Range of mission initial angle public double EmissionAngleRange { get; set; } Property Value double NumParticlesToEmit Maximum number of particles to emit default is 0 (no limit) public int NumParticlesToEmit { get; set; } Property Value int ParticleAlpha Initial Alpha for new particles public float ParticleAlpha { get; set; } Property Value float ParticleAlphaRange Alpha range for new particles public float ParticleAlphaRange { get; set; } Property Value float ParticleAlphaSpeed How fast the particles will change public float ParticleAlphaSpeed { get; set; } Property Value float ParticleAnimation Animation executed by particle public Animation ParticleAnimation { get; set; } Property Value Animation ParticleBirthRate Number of particles emitted per second public float ParticleBirthRate { get; set; } Property Value float ParticleBlendMode Blending mode for particles public BlendMode ParticleBlendMode { get; set; } Property Value BlendMode ParticleColor New particles color public Color ParticleColor { get; set; } Property Value Color ParticleColorAlphaRange Range of initial alpha for new particles public float ParticleColorAlphaRange { get; set; } Property Value float ParticleColorAlphaSpeed Speed of alpha change public float ParticleColorAlphaSpeed { get; set; } Property Value float ParticleColorBlendFactor Initial blend factor for new particles public float ParticleColorBlendFactor { get; set; } Property Value float ParticleColorBlendFactorRange Range of blend factor for new particles public float ParticleColorBlendFactorRange { get; set; } Property Value float ParticleColorBlendFactorSpeed How fast blend factor will change public float ParticleColorBlendFactorSpeed { get; set; } Property Value float ParticleColorBlueRange blue range for new particles color public float ParticleColorBlueRange { get; set; } Property Value float ParticleColorGreenRange green range for new particles color public float ParticleColorGreenRange { get; set; } Property Value float ParticleColorRedRange Red range for new particles public float ParticleColorRedRange { get; set; } Property Value float ParticleColorSequence Sequence of colors particle will have (This overrides the ParticleColor property) Use ParticleColorSequence to specify for instance a color for th beginning of particle life and end of life and the colors will be interpolated public Color[] ParticleColorSequence { get; set; } Property Value Color[] ParticleLifetime Average lifetime of particles public float ParticleLifetime { get; set; } Property Value float ParticleLifetimeRange Range of lifetime for new particles public float ParticleLifetimeRange { get; set; } Property Value float ParticlePosition Average position for new particles public PointF ParticlePosition { get; set; } Property Value PointF ParticlePositionRange Position range for new particles public Vector2 ParticlePositionRange { get; set; } Property Value Vector2 ParticlePositionXRange X position range for new particles public float ParticlePositionXRange { get; set; } Property Value float ParticlePositionYRange Y position range for new particles public float ParticlePositionYRange { get; set; } Property Value float ParticleRotation Rotation for new particles public double ParticleRotation { get; set; } Property Value double ParticleRotationRange Range rotation for new particles public double ParticleRotationRange { get; set; } Property Value double ParticleRotationSpeed Rotation speed for new particles public double ParticleRotationSpeed { get; set; } Property Value double ParticleScale Initial particle scale public float ParticleScale { get; set; } Property Value float ParticleScaleRange Range of new particles scale public float ParticleScaleRange { get; set; } Property Value float ParticleScaleSpeed Scale speed for new particles public float ParticleScaleSpeed { get; set; } Property Value float ParticleSize Size for new particles public SizeF ParticleSize { get; set; } Property Value SizeF ParticleSpeed Speed of new particles public float ParticleSpeed { get; set; } Property Value float ParticleSpeedRange Speed range for new particles public float ParticleSpeedRange { get; set; } Property Value float ParticleTexture Particle texture public Texture ParticleTexture { get; set; } Property Value Texture TargetNode Target node public Node TargetNode { get; set; } Property Value Node XAcceleration X particle acceleration public float XAcceleration { get; set; } Property Value float YAcceleration Y particle acceleration public float YAcceleration { get; set; } Property Value float Methods AdvanceSimulationTime(double) Advance the particle emission state public void AdvanceSimulationTime(double seconds) Parameters seconds double time to advance in seconds Copy() Copy this particle emitter protected override Node Copy() Returns Node CreateConfetti() Create confetti particles public static ParticleEmitterNode CreateConfetti() Returns ParticleEmitterNode CreateFire() Create a Fire particle emitter public static ParticleEmitterNode CreateFire() Returns ParticleEmitterNode CreateFireworks() Create a Fireworks particle emitter public static ParticleEmitterNode CreateFireworks() Returns ParticleEmitterNode CreateFireworks(Color) Create a Fireworks particle emitter with the given color public static ParticleEmitterNode CreateFireworks(Color color) Parameters color Color Returns ParticleEmitterNode CreateMagic(Color) Creates a Magic/Fireflies particle emitter with the given color public static ParticleEmitterNode CreateMagic(Color color) Parameters color Color Returns ParticleEmitterNode CreateRain() Create rain particle emitter public static ParticleEmitterNode CreateRain() Returns ParticleEmitterNode CreateRainbowTrail() Create Rainbow Trail public static ParticleEmitterNode CreateRainbowTrail() Returns ParticleEmitterNode CreateSmoke() Create smoke particle emitter public static ParticleEmitterNode CreateSmoke() Returns ParticleEmitterNode CreateSnow() Create snow particle emitter public static ParticleEmitterNode CreateSnow() Returns ParticleEmitterNode CreateSparks() Create sparks particle emitter public static ParticleEmitterNode CreateSparks() Returns ParticleEmitterNode CreateTrail(Color) Create a Trail given color public static ParticleEmitterNode CreateTrail(Color color) Parameters color Color Returns ParticleEmitterNode ResetSimulation() Reset particle emission state public void ResetSimulation()"
  },
  "api/Fantas.Physics.CircleBody.html": {
    "href": "api/Fantas.Physics.CircleBody.html",
    "title": "Class CircleBody | Fantas",
    "keywords": "Class CircleBody Namespace Fantas.Physics Assembly Fantas.dll Circular body public sealed class CircleBody : PhysicsBody Inheritance object PhysicsBody CircleBody Inherited Members PhysicsBody.ContactWith(PhysicsBody) PhysicsBody.ContactWithAny(PhysicsBody[]) PhysicsBody.ContactWithAll(PhysicsBody[]) PhysicsBody.ApplyAngularImpulse(double) PhysicsBody.ApplyForce(Vector2) PhysicsBody.ApplyForce(Vector2, PointF) PhysicsBody.ApplyImpulse(Vector2) PhysicsBody.ApplyImpulse(Vector2, PointF) PhysicsBody.ApplyTorque(double) PhysicsBody.AllContactedBodies PhysicsBody.AllowsRotation PhysicsBody.AngularVelocity PhysicsBody.Area PhysicsBody.Category PhysicsBody.ContactMask PhysicsBody.CollisionMask PhysicsBody.Density PhysicsBody.Dynamic PhysicsBody.Friction PhysicsBody.Joints PhysicsBody.Mass PhysicsBody.Node PhysicsBody.Resting PhysicsBody.Restitution PhysicsBody.Velocity object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CircleBody(float) Creates a circle physical body with the given radius public CircleBody(float radius) Parameters radius float circle radius CircleBody(float, PointF) Creates a circle physical body with the given radius and the circle center public CircleBody(float radius, PointF center) Parameters radius float circle radius center PointF circle radius"
  },
  "api/Fantas.Physics.ContactEvent.html": {
    "href": "api/Fantas.Physics.ContactEvent.html",
    "title": "Delegate ContactEvent | Fantas",
    "keywords": "Delegate ContactEvent Namespace Fantas.Physics Assembly Fantas.dll Called when two physics body collide The collisionInfo parameter contains information about the collision public delegate void ContactEvent(ContactInfo contactInfo) Parameters contactInfo ContactInfo Constructors ContactEvent(object, nint) public ContactEvent(object @object, nint method) Parameters object object method nint Methods BeginInvoke(ContactInfo, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(ContactInfo contactInfo, AsyncCallback callback, object @object) Parameters contactInfo ContactInfo callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(ContactInfo) public virtual void Invoke(ContactInfo contactInfo) Parameters contactInfo ContactInfo"
  },
  "api/Fantas.Physics.ContactHandler.html": {
    "href": "api/Fantas.Physics.ContactHandler.html",
    "title": "Class ContactHandler | Fantas",
    "keywords": "Class ContactHandler Namespace Fantas.Physics Assembly Fantas.dll Contact handler object that contains contact or collision action events public sealed class ContactHandler Inheritance object ContactHandler Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties OnContactBegin Called when two body start contact/collision public ContactEvent OnContactBegin { get; set; } Property Value ContactEvent OnContactEnd Called when two body finished the contact/collision public ContactEvent OnContactEnd { get; set; } Property Value ContactEvent"
  },
  "api/Fantas.Physics.ContactInfo.html": {
    "href": "api/Fantas.Physics.ContactInfo.html",
    "title": "Class ContactInfo | Fantas",
    "keywords": "Class ContactInfo Namespace Fantas.Physics Assembly Fantas.dll Contains the information of a contact/collision between two PhysicsBodys. public sealed class ContactInfo Inheritance object ContactInfo Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties BodyA Body A in the contact public PhysicsBody BodyA { get; } Property Value PhysicsBody BodyB Body B in the contact public PhysicsBody BodyB { get; } Property Value PhysicsBody CollisionImpulse Collision impulse public double CollisionImpulse { get; } Property Value double ContactNormal Collision direction. public Vector2 ContactNormal { get; } Property Value Vector2 ContactPointA Point of contact A. public PointF ContactPointA { get; } Property Value PointF ContactPointB Point of contact B. public PointF ContactPointB { get; } Property Value PointF"
  },
  "api/Fantas.Physics.Edge.html": {
    "href": "api/Fantas.Physics.Edge.html",
    "title": "Class Edge | Fantas",
    "keywords": "Class Edge Namespace Fantas.Physics Assembly Fantas.dll Represent an physical edge for collision with bodies public sealed class Edge : PhysicsBody Inheritance object PhysicsBody Edge Inherited Members PhysicsBody.ContactWith(PhysicsBody) PhysicsBody.ContactWithAny(PhysicsBody[]) PhysicsBody.ContactWithAll(PhysicsBody[]) PhysicsBody.ApplyAngularImpulse(double) PhysicsBody.ApplyForce(Vector2) PhysicsBody.ApplyForce(Vector2, PointF) PhysicsBody.ApplyImpulse(Vector2) PhysicsBody.ApplyImpulse(Vector2, PointF) PhysicsBody.ApplyTorque(double) PhysicsBody.AllContactedBodies PhysicsBody.AllowsRotation PhysicsBody.AngularVelocity PhysicsBody.Area PhysicsBody.Category PhysicsBody.ContactMask PhysicsBody.CollisionMask PhysicsBody.Density PhysicsBody.Dynamic PhysicsBody.Friction PhysicsBody.Joints PhysicsBody.Mass PhysicsBody.Node PhysicsBody.Resting PhysicsBody.Restitution PhysicsBody.Velocity object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Edge(PointF, PointF) Create an physical edge from point 1 to point 2 public Edge(PointF from, PointF to) Parameters from PointF to PointF"
  },
  "api/Fantas.Physics.NodeExtensions.html": {
    "href": "api/Fantas.Physics.NodeExtensions.html",
    "title": "Class NodeExtensions | Fantas",
    "keywords": "Class NodeExtensions Namespace Fantas.Physics Assembly Fantas.dll Convenient methods to setup physics body to a Node public static class NodeExtensions Inheritance object NodeExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods SetupBody(CircleNode, int) Set a physics body to a circle node public static void SetupBody(this CircleNode circleNode, int category = -1) Parameters circleNode CircleNode category int body category SetupBody(PolygonNode, int) Set a physics body to a polygon node public static void SetupBody(this PolygonNode polygon, int category = -1) Parameters polygon PolygonNode category int body category SetupBody(RectangleNode, int) public static void SetupBody(this RectangleNode rectangleNode, int category = -1) Parameters rectangleNode RectangleNode category int body category SetupBody(SpriteNode, int) Set a physics body to a sprite node public static void SetupBody(this SpriteNode spriteNode, int category = -1) Parameters spriteNode SpriteNode category int body category SetupBody(SpritePolylineNode, int) Set a physics body to a sprite polyline node public static void SetupBody(this SpritePolylineNode polyline, int category = -1) Parameters polyline SpritePolylineNode category int body category SetupBody(TriangleNode, int) Set a physics body to a sprite node public static void SetupBody(this TriangleNode triangle, int category = -1) Parameters triangle TriangleNode category int body category SetupEdge(RectangleNode, int) public static void SetupEdge(this RectangleNode rectangleNode, int category = -1) Parameters rectangleNode RectangleNode category int body category SetupEdge(Scene, int) Set a physics body edge to an scene public static void SetupEdge(this Scene scene, int category = -1) Parameters scene Scene category int body category SetupEdge(SpriteNode, int) Set a physics body edge to a sprite node public static void SetupEdge(this SpriteNode spriteNode, int category = -1) Parameters spriteNode SpriteNode category int body category"
  },
  "api/Fantas.Physics.PhysicsBody.html": {
    "href": "api/Fantas.Physics.PhysicsBody.html",
    "title": "Class PhysicsBody | Fantas",
    "keywords": "Class PhysicsBody Namespace Fantas.Physics Assembly Fantas.dll Physics Body simulation object public abstract class PhysicsBody Inheritance object PhysicsBody Derived CircleBody Edge PolygonBody PolygonEdge RectangleBody RectangleEdge Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties AllContactedBodies List of bodies in contact with this body public PhysicsBody[] AllContactedBodies { get; } Property Value PhysicsBody[] AllowsRotation If body is allowed to rotate (Angular momentum) public bool AllowsRotation { get; set; } Property Value bool AngularVelocity Angular velocity in radians per second. public double AngularVelocity { get; set; } Property Value double Area Area of the physics body public double Area { get; } Property Value double Category Body category public int Category { get; set; } Property Value int CollisionMask Collision mask public int CollisionMask { get; set; } Property Value int ContactMask Contact mask public int ContactMask { get; set; } Property Value int Density Body Density public double Density { get; set; } Property Value double Dynamic Tells if the body is affected by forces and impulses in the simulation. public bool Dynamic { get; set; } Property Value bool Friction Surface roughness of the physics body. A value between 0.0 and 1.0, with a default of 0.2 public double Friction { get; set; } Property Value double Joints Joints that are connected to the physics body. public PhysicsJoint[] Joints { get; } Property Value PhysicsJoint[] Mass Mass of the physics body. (Updates the density when set.) public double Mass { get; set; } Property Value double Node Get the node this body is connected public Node Node { get; } Property Value Node Resting Tells whether the body is resting on another body in the simulation, and thus does not participate in the simulation. public bool Resting { get; set; } Property Value bool Restitution Proportion of energy, between 0.0 and 1.0, that the physics body loses when it bounces off of another physics body. The default is 0.2. public double Restitution { get; set; } Property Value double Velocity Body motion velocity vector public Vector2 Velocity { get; set; } Property Value Vector2 Methods ApplyAngularImpulse(double) Apply angular impulse to body public void ApplyAngularImpulse(double impulse) Parameters impulse double ApplyForce(Vector2) Applies a force through the center of mass of the body public void ApplyForce(Vector2 force) Parameters force Vector2 ApplyForce(Vector2, PointF) Applies a force at the point to the body public void ApplyForce(Vector2 force, PointF point) Parameters force Vector2 point PointF ApplyImpulse(Vector2) Applies a impulse at the point to the body public void ApplyImpulse(Vector2 impulse) Parameters impulse Vector2 ApplyImpulse(Vector2, PointF) Applies a impulse at the point to the body public void ApplyImpulse(Vector2 impulse, PointF point) Parameters impulse Vector2 point PointF ApplyTorque(double) Applies a torque to the body public void ApplyTorque(double torque) Parameters torque double ContactWith(PhysicsBody) Check if the body is in contact with another body public bool ContactWith(PhysicsBody otherBody) Parameters otherBody PhysicsBody Returns bool ContactWithAll(PhysicsBody[]) Check if this body is in contact with all given bodies public bool ContactWithAll(PhysicsBody[] otherBodies) Parameters otherBodies PhysicsBody[] Returns bool ContactWithAny(PhysicsBody[]) Check if this body is in contact with any of the given bodies public bool ContactWithAny(PhysicsBody[] otherBodies) Parameters otherBodies PhysicsBody[] Returns bool"
  },
  "api/Fantas.Physics.PhysicsJoint.html": {
    "href": "api/Fantas.Physics.PhysicsJoint.html",
    "title": "Class PhysicsJoint | Fantas",
    "keywords": "Class PhysicsJoint Namespace Fantas.Physics Assembly Fantas.dll Base joint type public abstract class PhysicsJoint Inheritance object PhysicsJoint Derived PhysicsJointFixed PhysicsJointLimit PhysicsJointPin PhysicsJointSliding PhysicsJointSpring Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties BodyA Joint Body A public PhysicsBody BodyA { get; } Property Value PhysicsBody BodyB Joint Body B public PhysicsBody BodyB { get; } Property Value PhysicsBody"
  },
  "api/Fantas.Physics.PhysicsJointFixed.html": {
    "href": "api/Fantas.Physics.PhysicsJointFixed.html",
    "title": "Class PhysicsJointFixed | Fantas",
    "keywords": "Class PhysicsJointFixed Namespace Fantas.Physics Assembly Fantas.dll A PhysicsJoint that rigidly connects two physics bodies. public sealed class PhysicsJointFixed : PhysicsJoint Inheritance object PhysicsJoint PhysicsJointFixed Inherited Members PhysicsJoint.BodyA PhysicsJoint.BodyB object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PhysicsJointFixed(PhysicsBody, PhysicsBody, PointF) Connect two bodies as if they were fused public PhysicsJointFixed(PhysicsBody bodyA, PhysicsBody bodyB, PointF anchor) Parameters bodyA PhysicsBody bodyB PhysicsBody anchor PointF"
  },
  "api/Fantas.Physics.PhysicsJointLimit.html": {
    "href": "api/Fantas.Physics.PhysicsJointLimit.html",
    "title": "Class PhysicsJointLimit | Fantas",
    "keywords": "Class PhysicsJointLimit Namespace Fantas.Physics Assembly Fantas.dll A PhysicsJoint that connects two physics bodies as if by a rope. public sealed class PhysicsJointLimit : PhysicsJoint Inheritance object PhysicsJoint PhysicsJointLimit Inherited Members PhysicsJoint.BodyA PhysicsJoint.BodyB object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PhysicsJointLimit(PhysicsBody, PhysicsBody, PointF, PointF) Connect two physics bodies as if by a rope. public PhysicsJointLimit(PhysicsBody bodyA, PhysicsBody bodyB, PointF anchorA, PointF anchorB) Parameters bodyA PhysicsBody bodyB PhysicsBody anchorA PointF anchorB PointF Properties MaxLength Maximum distance that is allowed between the bodies that are connected by the joint public float MaxLength { get; set; } Property Value float"
  },
  "api/Fantas.Physics.PhysicsJointPin.html": {
    "href": "api/Fantas.Physics.PhysicsJointPin.html",
    "title": "Class PhysicsJointPin | Fantas",
    "keywords": "Class PhysicsJointPin Namespace Fantas.Physics Assembly Fantas.dll A PhysicsJointPin pins two bodies to a common point. public sealed class PhysicsJointPin : PhysicsJoint Inheritance object PhysicsJoint PhysicsJointPin Inherited Members PhysicsJoint.BodyA PhysicsJoint.BodyB object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PhysicsJointPin(PhysicsBody, PhysicsBody, PointF) Connect two bodies with a pin, allowing it to rotate public PhysicsJointPin(PhysicsBody bodyA, PhysicsBody bodyB, PointF anchor) Parameters bodyA PhysicsBody bodyB PhysicsBody anchor PointF"
  },
  "api/Fantas.Physics.PhysicsJointSliding.html": {
    "href": "api/Fantas.Physics.PhysicsJointSliding.html",
    "title": "Class PhysicsJointSliding | Fantas",
    "keywords": "Class PhysicsJointSliding Namespace Fantas.Physics Assembly Fantas.dll A PhysicsJointSliding connects two physics bodies as if by a sliding rod. public sealed class PhysicsJointSliding : PhysicsJoint Inheritance object PhysicsJoint PhysicsJointSliding Inherited Members PhysicsJoint.BodyA PhysicsJoint.BodyB object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PhysicsJointSliding(PhysicsBody, PhysicsBody, PointF, Vector2) Connect two physics bodies as if by a sliding rod. public PhysicsJointSliding(PhysicsBody bodyA, PhysicsBody bodyB, PointF anchor, Vector2 axis) Parameters bodyA PhysicsBody bodyB PhysicsBody anchor PointF axis Vector2 Properties LowerDistanceLimit Lower distance from the anchor point that objects may slide. public float LowerDistanceLimit { get; set; } Property Value float UpperDistanceLimit Upper distance from the anchor point that objects may slide. public float UpperDistanceLimit { get; set; } Property Value float"
  },
  "api/Fantas.Physics.PhysicsJointSpring.html": {
    "href": "api/Fantas.Physics.PhysicsJointSpring.html",
    "title": "Class PhysicsJointSpring | Fantas",
    "keywords": "Class PhysicsJointSpring Namespace Fantas.Physics Assembly Fantas.dll A PhysicsJointSpring connects two physics bodies as if by a spring. public sealed class PhysicsJointSpring : PhysicsJoint Inheritance object PhysicsJoint PhysicsJointSpring Inherited Members PhysicsJoint.BodyA PhysicsJoint.BodyB object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PhysicsJointSpring(PhysicsBody, PhysicsBody, PointF, PointF) Connect two physics bodies as if by a spring. public PhysicsJointSpring(PhysicsBody bodyA, PhysicsBody bodyB, PointF anchorA, PointF anchorB) Parameters bodyA PhysicsBody bodyB PhysicsBody anchorA PointF anchorB PointF Properties Damping Controls the rate at which oscillations decay. public float Damping { get; set; } Property Value float Frequency Controls the speed with which oscillations occur. public float Frequency { get; set; } Property Value float"
  },
  "api/Fantas.Physics.PhysicsWorld.html": {
    "href": "api/Fantas.Physics.PhysicsWorld.html",
    "title": "Class PhysicsWorld | Fantas",
    "keywords": "Class PhysicsWorld Namespace Fantas.Physics Assembly Fantas.dll The PhysicsWorld provides: Global values such as Gravity. Connecting PhysicsBodies with the AddJoint(PhysicsJoint) method. Raising events when PhysicsBody begin or end contact with each other(DidBeginContact, DidEndContact). public sealed class PhysicsWorld Inheritance object PhysicsWorld Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties DefaultCollisionHandler event when two bodies contact begin public ContactHandler DefaultCollisionHandler { get; } Property Value ContactHandler Gravity Gravitational acceleration public Vector2 Gravity { get; set; } Property Value Vector2 Iterations Number of iterations to be used by impulse solver The default value is 10, for a more precise use a higher value For a faster solver use a lower value (This only affect Chipmunk/MonoGame backend) public int Iterations { get; set; } Property Value int Speed The speed at which the physics simulation runs. public float Speed { get; set; } Property Value float Methods AddJoint(PhysicsJoint) Add joint to world public void AddJoint(PhysicsJoint joint) Parameters joint PhysicsJoint EnumarateBodies(PointF) Enumerate all physical bodies at point public PhysicsBody[] EnumarateBodies(PointF point) Parameters point PointF Returns PhysicsBody[] EnumarateBodies(PointF, int) Enumerate all physical bodies at point that match the filter public PhysicsBody[] EnumarateBodies(PointF point, int categories) Parameters point PointF categories int Returns PhysicsBody[] EnumarateBodies(RectangleF) Enumerate all physical bodies inside the rectangle public PhysicsBody[] EnumarateBodies(RectangleF rect) Parameters rect RectangleF Returns PhysicsBody[] EnumarateBodies(RectangleF, int) Enumerate all physical bodies inside the rectangle and match the filter public PhysicsBody[] EnumarateBodies(RectangleF rect, int categories) Parameters rect RectangleF categories int Returns PhysicsBody[] GetBody(PointF) Returns the first PhysicsBody found that contains a point. public PhysicsBody GetBody(PointF point) Parameters point PointF Returns PhysicsBody GetBody(PointF, int) Get the physical body at point that match the filter mask public PhysicsBody GetBody(PointF point, int category) Parameters point PointF category int Returns PhysicsBody GetBody(RectangleF) Returns the first PhysicsBody whose shape intersects a rectangle. public PhysicsBody GetBody(RectangleF rect) Parameters rect RectangleF Returns PhysicsBody GetBody(RectangleF, int) Get the first body inside the rectangle bound that match the filter public PhysicsBody GetBody(RectangleF rect, int category) Parameters rect RectangleF category int Returns PhysicsBody GetPairCollisionHandler(int, int) event when two bodies contact begin public ContactHandler GetPairCollisionHandler(int collisionTypeA, int collisionTypeB) Parameters collisionTypeA int collisionTypeB int Returns ContactHandler Raycast(PointF, PointF) Returns the first PhysicsBody that intersects a ray defined by two points. public RaycastHit Raycast(PointF rayStart, PointF rayEnd) Parameters rayStart PointF rayEnd PointF Returns RaycastHit Raycast(PointF, PointF, int) Return the first body that intersect with the raycast public RaycastHit Raycast(PointF rayStart, PointF rayEnd, int categories) Parameters rayStart PointF rayEnd PointF categories int Returns RaycastHit RaycastBodies(PointF, PointF) Get all bodies that intersect the raycast public RaycastHit[] RaycastBodies(PointF rayStart, PointF rayEnd) Parameters rayStart PointF rayEnd PointF Returns RaycastHit[] RaycastBodies(PointF, PointF, int) Get all bodies that intersect the raycast and match the filter public RaycastHit[] RaycastBodies(PointF rayStart, PointF rayEnd, int categories) Parameters rayStart PointF rayEnd PointF categories int Returns RaycastHit[] RemoveAllJoints() Removes all PhysicsJoints. public void RemoveAllJoints() RemoveJoint(PhysicsJoint) Removes the specified PhysicsJoint. public void RemoveJoint(PhysicsJoint joint) Parameters joint PhysicsJoint"
  },
  "api/Fantas.Physics.PolygonBody.html": {
    "href": "api/Fantas.Physics.PolygonBody.html",
    "title": "Class PolygonBody | Fantas",
    "keywords": "Class PolygonBody Namespace Fantas.Physics Assembly Fantas.dll Polygonal body public sealed class PolygonBody : PhysicsBody Inheritance object PhysicsBody PolygonBody Inherited Members PhysicsBody.ContactWith(PhysicsBody) PhysicsBody.ContactWithAny(PhysicsBody[]) PhysicsBody.ContactWithAll(PhysicsBody[]) PhysicsBody.ApplyAngularImpulse(double) PhysicsBody.ApplyForce(Vector2) PhysicsBody.ApplyForce(Vector2, PointF) PhysicsBody.ApplyImpulse(Vector2) PhysicsBody.ApplyImpulse(Vector2, PointF) PhysicsBody.ApplyTorque(double) PhysicsBody.AllContactedBodies PhysicsBody.AllowsRotation PhysicsBody.AngularVelocity PhysicsBody.Area PhysicsBody.Category PhysicsBody.ContactMask PhysicsBody.CollisionMask PhysicsBody.Density PhysicsBody.Dynamic PhysicsBody.Friction PhysicsBody.Joints PhysicsBody.Mass PhysicsBody.Node PhysicsBody.Resting PhysicsBody.Restitution PhysicsBody.Velocity object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PolygonBody(PointF[]) Creates a polygonal physical body with the given points public PolygonBody(PointF[] points) Parameters points PointF[] list of polygon points"
  },
  "api/Fantas.Physics.PolygonEdge.html": {
    "href": "api/Fantas.Physics.PolygonEdge.html",
    "title": "Class PolygonEdge | Fantas",
    "keywords": "Class PolygonEdge Namespace Fantas.Physics Assembly Fantas.dll Polygonal physical edge public sealed class PolygonEdge : PhysicsBody Inheritance object PhysicsBody PolygonEdge Inherited Members PhysicsBody.ContactWith(PhysicsBody) PhysicsBody.ContactWithAny(PhysicsBody[]) PhysicsBody.ContactWithAll(PhysicsBody[]) PhysicsBody.ApplyAngularImpulse(double) PhysicsBody.ApplyForce(Vector2) PhysicsBody.ApplyForce(Vector2, PointF) PhysicsBody.ApplyImpulse(Vector2) PhysicsBody.ApplyImpulse(Vector2, PointF) PhysicsBody.ApplyTorque(double) PhysicsBody.AllContactedBodies PhysicsBody.AllowsRotation PhysicsBody.AngularVelocity PhysicsBody.Area PhysicsBody.Category PhysicsBody.ContactMask PhysicsBody.CollisionMask PhysicsBody.Density PhysicsBody.Dynamic PhysicsBody.Friction PhysicsBody.Joints PhysicsBody.Mass PhysicsBody.Node PhysicsBody.Resting PhysicsBody.Restitution PhysicsBody.Velocity object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PolygonEdge(PointF[]) Creates a polygonal physical body with the given points public PolygonEdge(PointF[] points) Parameters points PointF[] list of polygon points"
  },
  "api/Fantas.Physics.RaycastHit.html": {
    "href": "api/Fantas.Physics.RaycastHit.html",
    "title": "Class RaycastHit | Fantas",
    "keywords": "Class RaycastHit Namespace Fantas.Physics Assembly Fantas.dll Represent a result of a Raycast query public sealed class RaycastHit Inheritance object RaycastHit Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Normal The normal vector public Vector2 Normal { get; } Property Value Vector2 PhysicsBody The PhysicsBody the raycast intersect public PhysicsBody PhysicsBody { get; } Property Value PhysicsBody Point Point of intersection public PointF Point { get; } Property Value PointF"
  },
  "api/Fantas.Physics.RectangleBody.html": {
    "href": "api/Fantas.Physics.RectangleBody.html",
    "title": "Class RectangleBody | Fantas",
    "keywords": "Class RectangleBody Namespace Fantas.Physics Assembly Fantas.dll Rectangle body public sealed class RectangleBody : PhysicsBody Inheritance object PhysicsBody RectangleBody Inherited Members PhysicsBody.ContactWith(PhysicsBody) PhysicsBody.ContactWithAny(PhysicsBody[]) PhysicsBody.ContactWithAll(PhysicsBody[]) PhysicsBody.ApplyAngularImpulse(double) PhysicsBody.ApplyForce(Vector2) PhysicsBody.ApplyForce(Vector2, PointF) PhysicsBody.ApplyImpulse(Vector2) PhysicsBody.ApplyImpulse(Vector2, PointF) PhysicsBody.ApplyTorque(double) PhysicsBody.AllContactedBodies PhysicsBody.AllowsRotation PhysicsBody.AngularVelocity PhysicsBody.Area PhysicsBody.Category PhysicsBody.ContactMask PhysicsBody.CollisionMask PhysicsBody.Density PhysicsBody.Dynamic PhysicsBody.Friction PhysicsBody.Joints PhysicsBody.Mass PhysicsBody.Node PhysicsBody.Resting PhysicsBody.Restitution PhysicsBody.Velocity object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors RectangleBody(SizeF) Creates a rectangular physical body with the given size public RectangleBody(SizeF size) Parameters size SizeF RectangleBody(SizeF, PointF) Creates a rectangular physical body with the given size and the given center public RectangleBody(SizeF size, PointF center) Parameters size SizeF center PointF"
  },
  "api/Fantas.Physics.RectangleEdge.html": {
    "href": "api/Fantas.Physics.RectangleEdge.html",
    "title": "Class RectangleEdge | Fantas",
    "keywords": "Class RectangleEdge Namespace Fantas.Physics Assembly Fantas.dll Rectangle physical edge loop public sealed class RectangleEdge : PhysicsBody Inheritance object PhysicsBody RectangleEdge Inherited Members PhysicsBody.ContactWith(PhysicsBody) PhysicsBody.ContactWithAny(PhysicsBody[]) PhysicsBody.ContactWithAll(PhysicsBody[]) PhysicsBody.ApplyAngularImpulse(double) PhysicsBody.ApplyForce(Vector2) PhysicsBody.ApplyForce(Vector2, PointF) PhysicsBody.ApplyImpulse(Vector2) PhysicsBody.ApplyImpulse(Vector2, PointF) PhysicsBody.ApplyTorque(double) PhysicsBody.AllContactedBodies PhysicsBody.AllowsRotation PhysicsBody.AngularVelocity PhysicsBody.Area PhysicsBody.Category PhysicsBody.ContactMask PhysicsBody.CollisionMask PhysicsBody.Density PhysicsBody.Dynamic PhysicsBody.Friction PhysicsBody.Joints PhysicsBody.Mass PhysicsBody.Node PhysicsBody.Resting PhysicsBody.Restitution PhysicsBody.Velocity object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors RectangleEdge(SizeF) Creates a rectangular physical edge with the given size public RectangleEdge(SizeF size) Parameters size SizeF RectangleEdge(SizeF, PointF) Creates a rectangular physical edge with the given size and offset center public RectangleEdge(SizeF size, PointF center) Parameters size SizeF center PointF"
  },
  "api/Fantas.Physics.html": {
    "href": "api/Fantas.Physics.html",
    "title": "Namespace Fantas.Physics | Fantas",
    "keywords": "Namespace Fantas.Physics Classes CircleBody Circular body ContactHandler Contact handler object that contains contact or collision action events ContactInfo Contains the information of a contact/collision between two PhysicsBodys. Edge Represent an physical edge for collision with bodies NodeExtensions Convenient methods to setup physics body to a Node PhysicsBody Physics Body simulation object PhysicsJoint Base joint type PhysicsJointFixed A PhysicsJoint that rigidly connects two physics bodies. PhysicsJointLimit A PhysicsJoint that connects two physics bodies as if by a rope. PhysicsJointPin A PhysicsJointPin pins two bodies to a common point. PhysicsJointSliding A PhysicsJointSliding connects two physics bodies as if by a sliding rod. PhysicsJointSpring A PhysicsJointSpring connects two physics bodies as if by a spring. PhysicsWorld The PhysicsWorld provides: Global values such as Gravity. Connecting PhysicsBodies with the AddJoint(PhysicsJoint) method. Raising events when PhysicsBody begin or end contact with each other(DidBeginContact, DidEndContact). PolygonBody Polygonal body PolygonEdge Polygonal physical edge RaycastHit Represent a result of a Raycast query RectangleBody Rectangle body RectangleEdge Rectangle physical edge loop Delegates ContactEvent Called when two physics body collide The collisionInfo parameter contains information about the collision"
  },
  "api/Fantas.PointExtension.html": {
    "href": "api/Fantas.PointExtension.html",
    "title": "Class PointExtension | Fantas",
    "keywords": "Class PointExtension Namespace Fantas Assembly Fantas.dll PointF method extensions public static class PointExtension Inheritance object PointExtension Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Add(PointF, Vector2) Move point using Vector public static PointF Add(this PointF point, Vector2 displacement) Parameters point PointF displacement Vector2 Returns PointF Offset(PointF, float, float) Move point using x and y public static PointF Offset(this PointF point, float x, float y) Parameters point PointF x float y float Returns PointF"
  },
  "api/Fantas.PolygonNode.html": {
    "href": "api/Fantas.PolygonNode.html",
    "title": "Class PolygonNode | Fantas",
    "keywords": "Class PolygonNode Namespace Fantas Assembly Fantas.dll Create a polygon shape node public class PolygonNode : ShapeNode Inheritance object Node ShapeNode PolygonNode Inherited Members ShapeNode.StrokeColor ShapeNode.FillColor ShapeNode.BlendMode ShapeNode.LineWidth ShapeNode.Antialiased Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Width Node.Height Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupBody(PolygonNode, int) Constructors PolygonNode(PolygonNode) Copy polygon node public PolygonNode(PolygonNode other) Parameters other PolygonNode PolygonNode(PointF[]) Create a Polygon node with the given points public PolygonNode(PointF[] points) Parameters points PointF[] Properties Points Return the points from the polygon public PointF[] Points { get; set; } Property Value PointF[] Methods Copy() Copy this Polygon node protected override Node Copy() Returns Node"
  },
  "api/Fantas.RandomExtensions.html": {
    "href": "api/Fantas.RandomExtensions.html",
    "title": "Class RandomExtensions | Fantas",
    "keywords": "Class RandomExtensions Namespace Fantas Assembly Fantas.dll Random extension methods public static class RandomExtensions Inheritance object RandomExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Random Global random generator public static Random Random { get; set; } Property Value Random Methods NextDouble(Random, double) Get the next double up to max value public static double NextDouble(this Random random, double max) Parameters random Random max double Returns double NextFloat(Random) Next float value (0f - 1f) public static float NextFloat(this Random random) Parameters random Random Returns float NextFloat(Random, float) Get the next float up to max value public static float NextFloat(this Random random, float max) Parameters random Random max float Returns float Range(Random, double, double) Returns a random float between min (inclusive) and max (exclusive) public static double Range(this Random random, double min, double max) Parameters random Random min double max double Returns double Range(Random, int, int) Returns a random integer between min (inclusive) and max (exclusive) public static int Range(this Random random, int min, int max) Parameters random Random min int max int Returns int Range(Random, float, float) Returns a random float between min (inclusive) and max (exclusive) public static float Range(this Random random, float min, float max) Parameters random Random min float max float Returns float"
  },
  "api/Fantas.RectangleExtensions.html": {
    "href": "api/Fantas.RectangleExtensions.html",
    "title": "Class RectangleExtensions | Fantas",
    "keywords": "Class RectangleExtensions Namespace Fantas Assembly Fantas.dll RectangleF extension methods public static class RectangleExtensions Inheritance object RectangleExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Center(Rectangle) Return the center point of rectangle public static PointF Center(this Rectangle rect) Parameters rect Rectangle Returns PointF Center(RectangleF) Return the center point of rectangle public static PointF Center(this RectangleF rect) Parameters rect RectangleF Returns PointF GetIntersectionDepth(RectangleF, RectangleF) Calculates the signed depth of intersection between two rectangles. public static Vector2 GetIntersectionDepth(this RectangleF rectA, RectangleF rectB) Parameters rectA RectangleF rectB RectangleF Returns Vector2 The amount of overlap between two intersecting rectangles. These depth values can be negative depending on which wides the rectangles intersect. This allows callers to determine the correct direction to push objects in order to resolve collisions. If the rectangles are not intersecting, Vector2.Zero is returned."
  },
  "api/Fantas.RectangleNode.html": {
    "href": "api/Fantas.RectangleNode.html",
    "title": "Class RectangleNode | Fantas",
    "keywords": "Class RectangleNode Namespace Fantas Assembly Fantas.dll Rectangle/Round Rectangle shape node public class RectangleNode : ShapeNode Inheritance object Node ShapeNode RectangleNode Inherited Members ShapeNode.StrokeColor ShapeNode.FillColor ShapeNode.BlendMode ShapeNode.LineWidth ShapeNode.Antialiased Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupBody(RectangleNode, int) NodeExtensions.SetupEdge(RectangleNode, int) Constructors RectangleNode(RectangleNode) Create copy of other rectangle node public RectangleNode(RectangleNode other) Parameters other RectangleNode RectangleNode(SizeF) Create a rectangle node public RectangleNode(SizeF size) Parameters size SizeF RectangleNode(SizeF, float) Create round rectangle with corner radius public RectangleNode(SizeF size, float cornerRadius) Parameters size SizeF cornerRadius float Properties Height Rectangle node height public float Height { get; set; } Property Value float Size Rectangle node size public SizeF Size { get; set; } Property Value SizeF Width Rectangle node width public float Width { get; set; } Property Value float Methods Copy() Copy this rectangle node protected override Node Copy() Returns Node"
  },
  "api/Fantas.Scene.html": {
    "href": "api/Fantas.Scene.html",
    "title": "Class Scene | Fantas",
    "keywords": "Class Scene Namespace Fantas Assembly Fantas.dll Scene is where all nodes are displayed public class Scene : Node Inheritance object Node Scene Inherited Members Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Width Node.Height Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.Click Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupEdge(Scene, int) Constructors Scene() Create a scene The size of the scene will match the logical device dimension in points for instance on iPhone 8, scene size will be 375 x 667 On Desktop platforms the default initial window size will be 800 x 480 The origin will be on the bottom left public Scene() Scene(Scene) Copy scene constructor public Scene(Scene other) Parameters other Scene Scene(SizeF) Create a Scene with the given logical size The origin will be on the bottom left public Scene(SizeF size) Parameters size SizeF Properties AnchorPoint Scene origin in the viewport public PointF AnchorPoint { get; set; } Property Value PointF BackgroundColor BackgroundColor of the scene public Color BackgroundColor { get; set; } Property Value Color Camera public CameraNode Camera { get; set; } Property Value CameraNode CurrentScene Current scene running in the game public static Scene CurrentScene { get; } Property Value Scene PhysicsWorld Get/Create PhysicsWorld public PhysicsWorld PhysicsWorld { get; } Property Value PhysicsWorld Size Size of the scene (points) public SizeF Size { get; set; } Property Value SizeF Methods ConvertPointFromWindow(Point) Convert from Windows coordinates to Scene public PointF ConvertPointFromWindow(Point windowPoint) Parameters windowPoint Point Returns PointF Point in Scene coordinates ConvertPointToWindow(PointF) Convert from Scene coordinates to Window public Point ConvertPointToWindow(PointF scenePoint) Parameters scenePoint PointF Returns Point Return point in Window coordinates (logical) Copy() Copy this scene protected override Node Copy() Returns Node Finish() Called when the scene is no longer being presented public virtual void Finish() FirstHitTest(PointF) Return the first Node that have HitTest = true, that intersects the scene point public Node FirstHitTest(PointF scenePoint) Parameters scenePoint PointF Returns Node OnControllerButtonPressed(ControllerButtonEventArgs) Called when the controller button is pressed public virtual void OnControllerButtonPressed(ControllerButtonEventArgs args) Parameters args ControllerButtonEventArgs OnControllerButtonReleased(ControllerButtonEventArgs) Called when the controller button is released public virtual void OnControllerButtonReleased(ControllerButtonEventArgs args) Parameters args ControllerButtonEventArgs OnControllerConnected(ControllerChangedEventArgs) Called when the controller is connected public virtual void OnControllerConnected(ControllerChangedEventArgs args) Parameters args ControllerChangedEventArgs OnControllerDisconnected(ControllerChangedEventArgs) Called when the controller is disconnected public virtual void OnControllerDisconnected(ControllerChangedEventArgs args) Parameters args ControllerChangedEventArgs OnControllerLeftThumbstickChanged(ControllerThumbstickChangedEventArgs) Called when the controller left thumbstick is position changed public virtual void OnControllerLeftThumbstickChanged(ControllerThumbstickChangedEventArgs args) Parameters args ControllerThumbstickChangedEventArgs OnControllerLeftTriggerChanged(ControllerTriggerChangedEventArgs) Called when the controller left trigger is position changed public virtual void OnControllerLeftTriggerChanged(ControllerTriggerChangedEventArgs args) Parameters args ControllerTriggerChangedEventArgs OnControllerRightThumbstickChanged(ControllerThumbstickChangedEventArgs) Called when the controller right thumbstick is position changed public virtual void OnControllerRightThumbstickChanged(ControllerThumbstickChangedEventArgs args) Parameters args ControllerThumbstickChangedEventArgs OnControllerRightTriggerChanged(ControllerTriggerChangedEventArgs) Called when the controller right trigger is position changed public virtual void OnControllerRightTriggerChanged(ControllerTriggerChangedEventArgs args) Parameters args ControllerTriggerChangedEventArgs OnDoubleClick(MouseEventArgs) Called when mouse button double-clicked public virtual void OnDoubleClick(MouseEventArgs args) Parameters args MouseEventArgs OnDoubleTap(TapEventArgs) Called on double tap gesture public virtual void OnDoubleTap(TapEventArgs args) Parameters args TapEventArgs OnKeyDown(KeyEventArgs) Called when keyboard key is pressed public virtual void OnKeyDown(KeyEventArgs args) Parameters args KeyEventArgs OnKeyUp(KeyEventArgs) Called when keyboard key is released public virtual void OnKeyUp(KeyEventArgs args) Parameters args KeyEventArgs OnLongPress(TapEventArgs) Called on long press gesture public virtual void OnLongPress(TapEventArgs args) Parameters args TapEventArgs OnMouseDown(MouseEventArgs) Called when mouse button is pressed public virtual void OnMouseDown(MouseEventArgs args) Parameters args MouseEventArgs OnMouseDrag(MouseEventArgs) Called on mouse drag (click + move) public virtual void OnMouseDrag(MouseEventArgs args) Parameters args MouseEventArgs OnMouseMove(MouseEventArgs) Called on mouse moved public virtual void OnMouseMove(MouseEventArgs args) Parameters args MouseEventArgs OnMouseUp(MouseEventArgs) Called when mouse button is released public virtual void OnMouseUp(MouseEventArgs args) Parameters args MouseEventArgs OnMouseWheel(MouseEventArgs) Mouse scroll wheel changed public virtual void OnMouseWheel(MouseEventArgs args) Parameters args MouseEventArgs OnPan(PanEventArgs) Called on pan gesture public virtual void OnPan(PanEventArgs args) Parameters args PanEventArgs OnPanComplete() Called on pan complete gesture public virtual void OnPanComplete() OnPanStart(PanEventArgs) Called on pan start gesture public virtual void OnPanStart(PanEventArgs args) Parameters args PanEventArgs OnPinch(PinchEventArgs) Called on pinch gesture public virtual void OnPinch(PinchEventArgs args) Parameters args PinchEventArgs OnPinchComplete() Called on pinch complete gesture public virtual void OnPinchComplete() OnPinchStart(PinchEventArgs) Called on pinch start gesture public virtual void OnPinchStart(PinchEventArgs args) Parameters args PinchEventArgs OnSwipe(SwipeEventArgs) Called on swipe gesture public virtual void OnSwipe(SwipeEventArgs args) Parameters args SwipeEventArgs OnTap(TapEventArgs) Called on tap gesture public virtual void OnTap(TapEventArgs args) Parameters args TapEventArgs OnTouchDown(TouchEventArgs) Called when screen touch begin public virtual void OnTouchDown(TouchEventArgs args) Parameters args TouchEventArgs OnTouchMove(TouchEventArgs) Called when screen touch move public virtual void OnTouchMove(TouchEventArgs args) Parameters args TouchEventArgs OnTouchUp(TouchEventArgs) Called when screen touch ends public virtual void OnTouchUp(TouchEventArgs args) Parameters args TouchEventArgs SizeChanged() Called when scene size was changed public virtual void SizeChanged() Start() Called when Scene scene is presented public virtual void Start() Update() Called every time the scene needs to update the game logic 1/60 seconds public virtual void Update() Events DoubleClick Called when mouse button double-clicked public event EventHandler<MouseEventArgs> DoubleClick Event Type EventHandler<MouseEventArgs> DoubleTap Called on double tap gesture public event EventHandler<TapEventArgs> DoubleTap Event Type EventHandler<TapEventArgs> KeyDown Called when keyboard key is pressed public event EventHandler<KeyEventArgs> KeyDown Event Type EventHandler<KeyEventArgs> KeyUp Called when keyboard key is released public event EventHandler<KeyEventArgs> KeyUp Event Type EventHandler<KeyEventArgs> LongPress Called on long press gesture public event EventHandler<TapEventArgs> LongPress Event Type EventHandler<TapEventArgs> MouseDown Called when mouse button is pressed public event EventHandler<MouseEventArgs> MouseDown Event Type EventHandler<MouseEventArgs> MouseDrag Called on mouse drag (click + move) public event EventHandler<MouseEventArgs> MouseDrag Event Type EventHandler<MouseEventArgs> MouseMove Called on mouse move public event EventHandler<MouseEventArgs> MouseMove Event Type EventHandler<MouseEventArgs> MouseUp Called when mouse button is released public event EventHandler<MouseEventArgs> MouseUp Event Type EventHandler<MouseEventArgs> MouseWheel Mouse scroll wheel changed public event EventHandler<MouseEventArgs> MouseWheel Event Type EventHandler<MouseEventArgs> Pan Called on Pan gesture public event EventHandler<PanEventArgs> Pan Event Type EventHandler<PanEventArgs> PanComplete Called on Pan complete gesture public event EventHandler PanComplete Event Type EventHandler PanStart Called on Pan start gesture public event EventHandler<PanEventArgs> PanStart Event Type EventHandler<PanEventArgs> Pinch Called on pinch gesture public event EventHandler<PinchEventArgs> Pinch Event Type EventHandler<PinchEventArgs> PinchComplete Called on pinch complete gesture public event EventHandler PinchComplete Event Type EventHandler PinchStart Called on pinch start gesture public event EventHandler<PinchEventArgs> PinchStart Event Type EventHandler<PinchEventArgs> Swipe Called on swipe gesture public event EventHandler<SwipeEventArgs> Swipe Event Type EventHandler<SwipeEventArgs> Tap Called on tap gesture public event EventHandler<TapEventArgs> Tap Event Type EventHandler<TapEventArgs> TouchDown Called when screen touch begin public event EventHandler<TouchEventArgs> TouchDown Event Type EventHandler<TouchEventArgs> TouchMove Called when screen touch move public event EventHandler<TouchEventArgs> TouchMove Event Type EventHandler<TouchEventArgs> TouchUp Called when screen touch ends public event EventHandler<TouchEventArgs> TouchUp Event Type EventHandler<TouchEventArgs>"
  },
  "api/Fantas.SceneScaleMode.html": {
    "href": "api/Fantas.SceneScaleMode.html",
    "title": "Enum SceneScaleMode | Fantas",
    "keywords": "Enum SceneScaleMode Namespace Fantas Assembly Fantas.dll SceneScale configure how the current Scene will be scaled when the window or view is resized. The resize could happen because the user resized the window or rotated the device public enum SceneScaleMode Fields AspectFill = 1 Preserve the aspect ratio of scene, and fill the whole visible area, cropping edges AspectFit = 2 Show the whole scene preserving aspect ratio, and showing letter box to display if needed Fill = 0 Fill is the default value, when the scaleMode is set to fill the size set to the scene will be preserved and scaled to fill the contents of the window, the Scene.SizeChanged will not be called ResizeFill = 3 Resize the scene to fill the viewport."
  },
  "api/Fantas.ShapeNode.html": {
    "href": "api/Fantas.ShapeNode.html",
    "title": "Class ShapeNode | Fantas",
    "keywords": "Class ShapeNode Namespace Fantas Assembly Fantas.dll ShapeNode (Rectangle, Ellipse, Triangle) public abstract class ShapeNode : Node Inheritance object Node ShapeNode Derived EllipseNode PolygonNode RectangleNode TriangleNode Inherited Members Node.Copy() Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Width Node.Height Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ShapeNode(ShapeNode) Creates a clone from another ShapeNode protected ShapeNode(ShapeNode other) Parameters other ShapeNode Properties Antialiased Draw Shape using antialias edges public bool Antialiased { get; set; } Property Value bool BlendMode Set the blend operation for the Shape node public BlendMode BlendMode { get; set; } Property Value BlendMode FillColor Shape fill color public Color FillColor { get; set; } Property Value Color LineWidth Stroke line width public float LineWidth { get; set; } Property Value float StrokeColor Stroke (border) color of shape public Color StrokeColor { get; set; } Property Value Color"
  },
  "api/Fantas.SpriteFrameNode.html": {
    "href": "api/Fantas.SpriteFrameNode.html",
    "title": "Class SpriteFrameNode | Fantas",
    "keywords": "Class SpriteFrameNode Namespace Fantas Assembly Fantas.dll Frame edge using SpriteNodes public class SpriteFrameNode : SpriteNode Inheritance object Node SpriteNode SpriteFrameNode Inherited Members SpriteNode.ScaleTo(SizeF) SpriteNode.Inflate(Vector2) SpriteNode.Inflate(float, float) SpriteNode.Inflate(float) SpriteNode.ExpandWidth(float) SpriteNode.ExpandHeight(float) SpriteNode.BlendMode SpriteNode.AnchorPoint SpriteNode.Color SpriteNode.TopLeftColor SpriteNode.TopRightColor SpriteNode.TopColor SpriteNode.BottomRightColor SpriteNode.RightColor SpriteNode.BottomLeftColor SpriteNode.LeftColor SpriteNode.BottomColor SpriteNode.ColorBlendFactor SpriteNode.CenterRect SpriteNode.Size SpriteNode.Width SpriteNode.Height SpriteNode.Texture Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupBody(SpriteNode, int) NodeExtensions.SetupEdge(SpriteNode, int) Constructors SpriteFrameNode(SpriteFrameNode) Copy ctor public SpriteFrameNode(SpriteFrameNode other) Parameters other SpriteFrameNode SpriteFrameNode(SizeF) Create SpriteFrameNode public SpriteFrameNode(SizeF size) Parameters size SizeF SpriteFrameNode(SizeF, Color) Create SpriteFrameNode public SpriteFrameNode(SizeF size, Color color) Parameters size SizeF color Color SpriteFrameNode(SizeF, Color, float) Create SpriteFrameNode public SpriteFrameNode(SizeF size, Color color, float frameThickness) Parameters size SizeF color Color frameThickness float Properties FrameAlpha Frame color public float FrameAlpha { get; set; } Property Value float FrameColor Frame color public Color FrameColor { get; set; } Property Value Color FrameThickness Frame thickness public float FrameThickness { get; set; } Property Value float Methods Copy() Copy this CropNode protected override Node Copy() Returns Node OnSizeChanged() Called when SpriteFrame size changes protected override void OnSizeChanged()"
  },
  "api/Fantas.SpriteLineNode.html": {
    "href": "api/Fantas.SpriteLineNode.html",
    "title": "Class SpriteLineNode | Fantas",
    "keywords": "Class SpriteLineNode Namespace Fantas Assembly Fantas.dll Create a line as a SpriteNode Drawing a Line using a Sprite can be better for performance reasons since Sprite drawing can be batched. public class SpriteLineNode : SpriteNode Inheritance object Node SpriteNode SpriteLineNode Inherited Members SpriteNode.ScaleTo(SizeF) SpriteNode.OnSizeChanged() SpriteNode.Inflate(Vector2) SpriteNode.Inflate(float, float) SpriteNode.Inflate(float) SpriteNode.ExpandWidth(float) SpriteNode.ExpandHeight(float) SpriteNode.BlendMode SpriteNode.AnchorPoint SpriteNode.Color SpriteNode.TopLeftColor SpriteNode.TopRightColor SpriteNode.TopColor SpriteNode.BottomRightColor SpriteNode.RightColor SpriteNode.BottomLeftColor SpriteNode.LeftColor SpriteNode.BottomColor SpriteNode.ColorBlendFactor SpriteNode.CenterRect SpriteNode.Size SpriteNode.Width SpriteNode.Height SpriteNode.Texture Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupBody(SpriteNode, int) NodeExtensions.SetupEdge(SpriteNode, int) Constructors SpriteLineNode() Construct SpriteLineNode (White, thickness:1) public SpriteLineNode() SpriteLineNode(SpriteLineNode) Copy SpriteLineNode public SpriteLineNode(SpriteLineNode other) Parameters other SpriteLineNode SpriteLineNode(PointF, PointF) Construct SpriteLineNode from startPoint to endPoint public SpriteLineNode(PointF startPoint, PointF endPoint) Parameters startPoint PointF endPoint PointF SpriteLineNode(PointF, PointF, Color) Construct SpriteLineNode from startPoint to endPoint with color public SpriteLineNode(PointF startPoint, PointF endPoint, Color color) Parameters startPoint PointF endPoint PointF color Color SpriteLineNode(PointF, PointF, Color, float) Construct SpriteLineNode from startPoint to endPoint with color and thickness public SpriteLineNode(PointF startPoint, PointF endPoint, Color color, float thickness) Parameters startPoint PointF endPoint PointF color Color thickness float Properties EndColor End line color public Color EndColor { get; set; } Property Value Color EndPoint End line location public PointF EndPoint { get; set; } Property Value PointF StartColor Start line color public Color StartColor { get; set; } Property Value Color StartPoint Start line location public PointF StartPoint { get; set; } Property Value PointF Thickness Get line thickness public float Thickness { get; set; } Property Value float Methods Copy() Copy this sprite line node protected override Node Copy() Returns Node UpdatePoints(PointF, PointF) Update SpriteLine Start and End public void UpdatePoints(PointF start, PointF end) Parameters start PointF end PointF"
  },
  "api/Fantas.SpriteNode.html": {
    "href": "api/Fantas.SpriteNode.html",
    "title": "Class SpriteNode | Fantas",
    "keywords": "Class SpriteNode Namespace Fantas Assembly Fantas.dll Node that draws a Sprite public class SpriteNode : Node Inheritance object Node SpriteNode Derived SpriteFrameNode SpriteLineNode ControlNode Inherited Members Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupBody(SpriteNode, int) NodeExtensions.SetupEdge(SpriteNode, int) Constructors SpriteNode() Creates an SpriteNode without Texture and empty size public SpriteNode() SpriteNode(SpriteNode) Copy a SpriteNode public SpriteNode(SpriteNode other) Parameters other SpriteNode SpriteNode(Texture) Creates a SpriteNode with the given texture public SpriteNode(Texture texture) Parameters texture Texture SpriteNode(Texture, SizeF) Creates a SpriteNode with the given texture and size public SpriteNode(Texture texture, SizeF size) Parameters texture Texture size SizeF SpriteNode(Color, SizeF) Creates a SpriteNode from a Color public SpriteNode(Color color, SizeF size) Parameters color Color Color of Sprite size SizeF Properties AnchorPoint Reference anchor point for drawing and rotation public PointF AnchorPoint { get; set; } Property Value PointF BlendMode Set the blend operation for the Sprite node public BlendMode BlendMode { get; set; } Property Value BlendMode BottomColor Sprite tint Bottom Color public Color BottomColor { get; set; } Property Value Color BottomLeftColor Sprite tint BottomLeft Color public Color BottomLeftColor { get; set; } Property Value Color BottomRightColor Sprite tint BottomRight Color public Color BottomRightColor { get; set; } Property Value Color CenterRect Define the center rect used in 9-way scale operations public RectangleF CenterRect { get; set; } Property Value RectangleF Color Sprite tint Color public Color Color { get; set; } Property Value Color ColorBlendFactor Color blend factor (0f-1f) public float ColorBlendFactor { get; set; } Property Value float Height Height of SpriteNode public float Height { get; set; } Property Value float LeftColor Sprite tint Left Color public Color LeftColor { get; set; } Property Value Color RightColor Sprite tint Right Color public Color RightColor { get; set; } Property Value Color Size Sprite node size public SizeF Size { get; set; } Property Value SizeF Texture SpriteNode current texture public Texture Texture { get; set; } Property Value Texture TopColor Sprite tint TopColor public Color TopColor { get; set; } Property Value Color TopLeftColor Sprite tint TopLeft Color public Color TopLeftColor { get; set; } Property Value Color TopRightColor Sprite tint TopRight Color public Color TopRightColor { get; set; } Property Value Color Width Width of SpriteNode public float Width { get; set; } Property Value float Methods Copy() Copy this SpriteNode protected override Node Copy() Returns Node ExpandHeight(float) Increase the Height of SpriteNode public void ExpandHeight(float delta) Parameters delta float ExpandWidth(float) Increase the Width of SpriteNode public void ExpandWidth(float delta) Parameters delta float Inflate(Vector2) Increase the size of SpriteNode public void Inflate(Vector2 delta) Parameters delta Vector2 Inflate(float) Increase the size of SpriteNode public void Inflate(float delta) Parameters delta float Inflate(float, float) Increase the size of SpriteNode public void Inflate(float x, float y) Parameters x float delta added to width y float delta added to height OnSizeChanged() Called when SpriteNode Size is explicitly change protected virtual void OnSizeChanged() ScaleTo(SizeF) Scale the SpriteNode to a new size public void ScaleTo(SizeF size) Parameters size SizeF"
  },
  "api/Fantas.SpritePolylineNode.html": {
    "href": "api/Fantas.SpritePolylineNode.html",
    "title": "Class SpritePolylineNode | Fantas",
    "keywords": "Class SpritePolylineNode Namespace Fantas Assembly Fantas.dll Polyline made of multiple sprite node lines public class SpritePolylineNode : Node Inheritance object Node SpritePolylineNode Inherited Members Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Width Node.Height Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupBody(SpritePolylineNode, int) Constructors SpritePolylineNode(SpritePolylineNode) Copy SpritePolylineNode public SpritePolylineNode(SpritePolylineNode other) Parameters other SpritePolylineNode Exceptions ArgumentNullException SpritePolylineNode(PointF[]) Ctor SpritePolylineNode public SpritePolylineNode(PointF[] points) Parameters points PointF[] SpritePolylineNode(PointF[], Color) Ctor SpritePolylineNode public SpritePolylineNode(PointF[] points, Color color) Parameters points PointF[] color Color SpritePolylineNode(PointF[], Color, float) Ctor SpritePolylineNode public SpritePolylineNode(PointF[] points, Color color, float thickness) Parameters points PointF[] color Color thickness float Properties Color Get sprite polyline color public Color Color { get; set; } Property Value Color Points Return the points from the polyline public PointF[] Points { get; set; } Property Value PointF[] Thickness Get sprite polyline thickness public float Thickness { get; set; } Property Value float Methods Copy() Copy this SpritePolylineNode protected override Node Copy() Returns Node"
  },
  "api/Fantas.SystemPlatform.html": {
    "href": "api/Fantas.SystemPlatform.html",
    "title": "Enum SystemPlatform | Fantas",
    "keywords": "Enum SystemPlatform Namespace Fantas Assembly Fantas.dll Enumeration to with runtime system platform public enum SystemPlatform Fields Android = 7 Android Linux = 4 Linux MacOS = 3 MacOS Unknown = 0 Unknown platform Windows = 1 Windows Xbox = 2 Xbox (UWP) iOS = 5 iOS (notice for tvOS use tvOS) tvOS = 6 tvOS"
  },
  "api/Fantas.Texture.html": {
    "href": "api/Fantas.Texture.html",
    "title": "Class Texture | Fantas",
    "keywords": "Class Texture Namespace Fantas Assembly Fantas.dll Texture public sealed class Texture : IDisposable Inheritance object Texture Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties ColorPixelData Get pixel data as int[] public Color[] ColorPixelData { get; } Property Value Color[] Height public float Height { get; } Property Value float PixelData Get pixel data as int[] public int[] PixelData { get; } Property Value int[] PixelTexture 1x1 pixel texture public static Texture PixelTexture { get; } Property Value Texture RawHeight Texture Raw height (independent of retina scale) public float RawHeight { get; } Property Value float RawSize Texture Raw Size (independent of retina scale) public SizeF RawSize { get; } Property Value SizeF RawWidth Texture Raw width (independent of retina scale) public float RawWidth { get; } Property Value float Size Texture Size public SizeF Size { get; } Property Value SizeF SparkTexture Spark texture used by ParticleEmitter public static Texture SparkTexture { get; } Property Value Texture TextureRectangle Texture rectangle inside if is subtexture or texture from atlas public RectangleF TextureRectangle { get; } Property Value RectangleF Width Texture width public float Width { get; } Property Value float Methods CreateSubTexture(RectangleF, Texture) Create a sub texture from a texture with Rectangle based on 0 - 1f public static Texture CreateSubTexture(RectangleF rectangle, Texture texture) Parameters rectangle RectangleF texture Texture Returns Texture CreateSubTexture(int, int, int, int, Texture) Create sub texture using integer coordinates public static Texture CreateSubTexture(int x, int y, int width, int heigh, Texture texture) Parameters x int y int width int heigh int texture Texture Returns Texture Dispose() Dispose Texture from VRAM public void Dispose() EncodeToPNG() Encode texture as PNG image in the byte[] public byte[] EncodeToPNG() Returns byte[] Return current texture encoded in PNG as a byte array ~Texture() Finalizer protected ~Texture() FromAsset(string) Loads a texture from a native asset Fantas will try to load from the native asset like Image assets on iOS drawable resources on Android MonoGame XNB Content on .NET from Contents/ public static Texture FromAsset(string assetName) Parameters assetName string asset lookup name Returns Texture FromColorPixel(Color) Create 1x1 color texture public static Texture FromColorPixel(Color color) Parameters color Color Returns Texture FromFile(string) Load a texture from an file path trying to match the screen-scale public static Texture FromFile(string file) Parameters file string Returns Texture FromFile(string, float) Load a texture from an file path public static Texture FromFile(string file, float scale) Parameters file string scale float Returns Texture FromName(string) Load a texture by name FromName will try to find the texture in different locations using the order: Native Asset Embedded Resource File public static Texture FromName(string name) Parameters name string Returns Texture FromPixelData(Color[], int, int) Create an Texture from pixel data public static Texture FromPixelData(Color[] pixelData, int width, int height) Parameters pixelData Color[] pixel data with color as Color array width int height int Returns Texture Exceptions ArgumentNullException ArgumentException FromPixelData(int[], int, int) Create an Texture from pixel data public static Texture FromPixelData(int[] pixelData, int width, int height) Parameters pixelData int[] pixel data with color encoded as 0xAARRGGBB width int texture width height int texture height Returns Texture Exceptions ArgumentNullException FromResource(Assembly, string, float) Load a texture from a resource image using the given scale public static Texture FromResource(Assembly assembly, string resourceName, float scale) Parameters assembly Assembly resourceName string scale float image scale Returns Texture FromResource(string) Load a texture from a resource image It will look on ALL loaded assemblies public static Texture FromResource(string resourceName) Parameters resourceName string Returns Texture FromResource(string, float) Load a texture from a resource image, using the given scale It will look on ALL loaded assemblies public static Texture FromResource(string resourceName, float scale) Parameters resourceName string scale float Returns Texture FromResourceCached(Assembly, string, float) Load a texture from a resource and cache it for future use public static Texture FromResourceCached(Assembly assembly, string resourceName, float scale) Parameters assembly Assembly resourceName string scale float Returns Texture FromStream(Stream, float) Load a texture from a stream (with scale) Using given scale public static Texture FromStream(Stream stream, float scale) Parameters stream Stream scale float Returns Texture RemoveTextureFromCache(Texture) Remove cached from Cache (will be called by Dispose) public static void RemoveTextureFromCache(Texture texture) Parameters texture Texture"
  },
  "api/Fantas.TextureAtlas.html": {
    "href": "api/Fantas.TextureAtlas.html",
    "title": "Class TextureAtlas | Fantas",
    "keywords": "Class TextureAtlas Namespace Fantas Assembly Fantas.dll A set of Textures grouped You can use Texture atlas when you have a set of textures that need to be loaded together. On old devices this can help to save VRAM, since all only one texture is loaded into the GPU and the small textures are bits of the main texture atlas. public sealed class TextureAtlas : IDisposable Inheritance object TextureAtlas Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties TextureNames Return all the names inside the TextureAtlas public string[] TextureNames { get; } Property Value string[] Methods Dispose() Dispose Texture Atlas from VRAM public void Dispose() ~TextureAtlas() Finalizer protected ~TextureAtlas() FromName(string) Loads a texture from Atlas by Name If the texture isn't found in the Atlas, the load wil fallback to loading the texture as asset/file public Texture FromName(string textureName) Parameters textureName string Returns Texture Load(string) Load atlas by Name public static TextureAtlas Load(string atlasName) Parameters atlasName string asset lookup name Returns TextureAtlas"
  },
  "api/Fantas.TileAdjacencyMask.html": {
    "href": "api/Fantas.TileAdjacencyMask.html",
    "title": "Enum TileAdjacencyMask | Fantas",
    "keywords": "Enum TileAdjacencyMask Namespace Fantas Assembly Fantas.dll Tile Adjacency Mask [Flags] public enum TileAdjacencyMask Fields All = HexFlatUpperRight | LowerLeftCorner All Down = 16 Down DownEdge = HexFlatUpperRight | HexFlatLowerRight | LowerRightEdge DownEdge HexFlatAll = LeftEdge | HexFlatUpperLeft HexFlatAll HexFlatDown = 8 HexFlatDown HexFlatLowerLeft = 16 HexFlatLowerLeft HexFlatLowerRight = 4 HexFlatLowerRight HexFlatUp = 1 HexFlatUp HexFlatUpperLeft = 32 HexFlatUpperLeft HexFlatUpperRight = 2 HexFlatUpperRight HexPointyAll = LeftEdge | HexFlatUpperLeft HexPointyAll HexPointyLeft = 32 HexPointyLeft HexPointyLowerLeft = 16 HexPointyLowerLeft HexPointyLowerRight = 8 HexPointyLowerRight HexPointyRight = 4 HexPointyRight HexPointyUpperLeft = 1 HexPointyUpperLeft HexPointyUpperRight = 2 HexPointyUpperRight Left = 64 Left LeftEdge = HexFlatUp | HexFlatUpperRight | UpperLeftEdge LeftEdge LowerLeft = 32 LowerLeft LowerLeftCorner = HexFlatLowerRight | HexFlatDown | RightEdge LowerLeftCorner LowerLeftEdge = HexFlatUp | HexFlatUpperRight | HexFlatLowerRight LowerLeftEdge LowerRight = 8 LowerRight LowerRightCorner = HexFlatUp | HexFlatUpperRight | UpEdge LowerRightCorner LowerRightEdge = HexFlatUp | Left | UpperLeft LowerRightEdge None = 0 None Right = 4 Right RightEdge = Down | HexFlatUpperLeft | LowerRightEdge RightEdge Up = 1 Up UpEdge = HexFlatLowerRight | HexFlatDown | UpperRightEdge UpEdge UpperLeft = 128 UpperLeft UpperLeftCorner = HexFlatUpperRight | HexFlatLowerRight | RightEdge UpperLeftCorner UpperLeftEdge = HexFlatLowerRight | HexFlatDown | Down UpperLeftEdge UpperRight = 2 UpperRight UpperRightCorner = HexFlatDown | Down | DownEdge UpperRightCorner UpperRightEdge = Down | HexFlatUpperLeft | Left UpperRightEdge"
  },
  "api/Fantas.TileDefinition.html": {
    "href": "api/Fantas.TileDefinition.html",
    "title": "Class TileDefinition | Fantas",
    "keywords": "Class TileDefinition Namespace Fantas Assembly Fantas.dll Tile Definition Defines a single tile that can be repeated in a tile map public sealed class TileDefinition Inheritance object TileDefinition Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TileDefinition(Texture) Create an Tile definition with a given texture public TileDefinition(Texture texture) Parameters texture Texture Properties FlipHorizontally Flip tile texture horizontally public bool FlipHorizontally { get; set; } Property Value bool FlipVertically Flip tile texture vertically public bool FlipVertically { get; set; } Property Value bool Name Tile definition name public string Name { get; set; } Property Value string Rotation Rotate tile 0/180/90/270/ public TileDefinitionRotation Rotation { get; set; } Property Value TileDefinitionRotation Size Tile size public SizeF Size { get; set; } Property Value SizeF Texture Tile Texture public Texture Texture { get; set; } Property Value Texture UserData Arbitraty user data public object UserData { get; set; } Property Value object"
  },
  "api/Fantas.TileDefinitionRotation.html": {
    "href": "api/Fantas.TileDefinitionRotation.html",
    "title": "Enum TileDefinitionRotation | Fantas",
    "keywords": "Enum TileDefinitionRotation Namespace Fantas Assembly Fantas.dll Tile rotation types public enum TileDefinitionRotation Fields Rotation0 = 0 Rotation180 = 2 Rotation270 = 3 Rotation90 = 1"
  },
  "api/Fantas.TileGroup.html": {
    "href": "api/Fantas.TileGroup.html",
    "title": "Class TileGroup | Fantas",
    "keywords": "Class TileGroup Namespace Fantas Assembly Fantas.dll Tile Group is either a definition for one tile or a collection of Tile Group Rules with adjacency public sealed class TileGroup Inheritance object TileGroup Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TileGroup(TileDefinition) Create a tile group using a tile definition public TileGroup(TileDefinition tileDefinition) Parameters tileDefinition TileDefinition Properties Empty Create an Empty tile group public static TileGroup Empty { get; } Property Value TileGroup Name Tile group name public string Name { get; set; } Property Value string"
  },
  "api/Fantas.TileGroupRule.html": {
    "href": "api/Fantas.TileGroupRule.html",
    "title": "Class TileGroupRule | Fantas",
    "keywords": "Class TileGroupRule Namespace Fantas Assembly Fantas.dll Rule on how the tile is placed in a tile map public sealed class TileGroupRule Inheritance object TileGroupRule Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TileGroupRule(TileAdjacencyMask, TileDefinition[]) Create a Tile Group Rule with given adjacency and tile definitions public TileGroupRule(TileAdjacencyMask adjacency, TileDefinition[] tileDefinitions) Parameters adjacency TileAdjacencyMask tileDefinitions TileDefinition[] Properties Adjacency Tile rule adjacency mask public TileAdjacencyMask Adjacency { get; set; } Property Value TileAdjacencyMask Name Tile group rule name public string Name { get; set; } Property Value string TileDefinitions Tile definitions used in this tile group rule public TileDefinition[] TileDefinitions { get; set; } Property Value TileDefinition[]"
  },
  "api/Fantas.TileMapNode.html": {
    "href": "api/Fantas.TileMapNode.html",
    "title": "Class TileMapNode | Fantas",
    "keywords": "Class TileMapNode Namespace Fantas Assembly Fantas.dll Tile Map node. public class TileMapNode : Node Inheritance object Node TileMapNode Inherited Members Node.Copy() Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Width Node.Height Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TileMapNode() Create an empty TileMapNode public TileMapNode() TileMapNode(TileSet, int, int) Create a TileMapNode with the given tile set and of the size rows x columns public TileMapNode(TileSet tileSet, int columns, int rows) Parameters tileSet TileSet columns int rows int TileMapNode(TileSet, int, int, SizeF) Create a TileMapNode with the given tile set and of the size rows x columns public TileMapNode(TileSet tileSet, int columns, int rows, SizeF tileSize) Parameters tileSet TileSet columns int rows int tileSize SizeF Properties AnchorPoint Reference anchor point for drawing and rotation public PointF AnchorPoint { get; set; } Property Value PointF BlendMode Set the blend operation for the Tile map node public BlendMode BlendMode { get; set; } Property Value BlendMode Color Tile map tint Color public Color Color { get; set; } Property Value Color ColorBlendFactor Color blend factor (0f-1f) public float ColorBlendFactor { get; set; } Property Value float MapSize Tile Map total size public SizeF MapSize { get; } Property Value SizeF NumberOfColumns Number of columns in the tile map public int NumberOfColumns { get; set; } Property Value int NumberOfRows Number of rows in the tile map public int NumberOfRows { get; set; } Property Value int TileSet Tile set used in this tile map public TileSet TileSet { get; set; } Property Value TileSet TileSize Size of each tile public SizeF TileSize { get; set; } Property Value SizeF Methods Fill(TileGroup) Fill tile map with the given group public void Fill(TileGroup tileGroup) Parameters tileGroup TileGroup GetTileColumnIndex(PointF) Get tile column index public int GetTileColumnIndex(PointF position) Parameters position PointF Returns int GetTileDefinition(int, int) Get tile definition of given position public TileDefinition GetTileDefinition(int column, int row) Parameters column int row int Returns TileDefinition GetTileGroup(int, int) Get tile definition of given position public TileGroup GetTileGroup(int column, int row) Parameters column int row int Returns TileGroup GetTileRowIndex(PointF) Get tile column index public int GetTileRowIndex(PointF position) Parameters position PointF Returns int SetTileGroup(TileGroup, int, int) Set the tile group for the specific tile location public void SetTileGroup(TileGroup tileGroup, int column, int row) Parameters tileGroup TileGroup column int row int"
  },
  "api/Fantas.TileSet.html": {
    "href": "api/Fantas.TileSet.html",
    "title": "Class TileSet | Fantas",
    "keywords": "Class TileSet Namespace Fantas Assembly Fantas.dll Contains definitions and group rules to be used in a Tile map public sealed class TileSet Inheritance object TileSet Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TileSet(TileGroup[]) Create a tile set with a list of tile groups public TileSet(TileGroup[] tileGroups) Parameters tileGroups TileGroup[] TileSet(TileGroup[], TileSetType) Create a tile set with a list of tile groups public TileSet(TileGroup[] tileGroups, TileSetType tileSetType) Parameters tileGroups TileGroup[] tileSetType TileSetType Properties DefaultTileGroup Default tile group public TileGroup DefaultTileGroup { get; set; } Property Value TileGroup DefaultTileSize Default tile size public SizeF DefaultTileSize { get; set; } Property Value SizeF Name Tile set name public string Name { get; set; } Property Value string TileGroups Tile set groups public TileGroup[] TileGroups { get; set; } Property Value TileGroup[] Type Tile set type public TileSetType Type { get; set; } Property Value TileSetType"
  },
  "api/Fantas.TileSetType.html": {
    "href": "api/Fantas.TileSetType.html",
    "title": "Enum TileSetType | Fantas",
    "keywords": "Enum TileSetType Namespace Fantas Assembly Fantas.dll Tile Set arrange/geometry public enum TileSetType Fields Grid = 0 Rectangular Grid HexagonalFlat = 1 Hexagonal Grid (Flat) HexagonalPointy = 2 Hexagonal Pointy (Flat) Isometric = 3 Isometric Grid"
  },
  "api/Fantas.Time.html": {
    "href": "api/Fantas.Time.html",
    "title": "Class Time | Fantas",
    "keywords": "Class Time Namespace Fantas Assembly Fantas.dll Get game time information public static class Time Inheritance object Time Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields TimePerFrame Time per frame (in seconds) 1/60 public const double TimePerFrame = 0.016666666666666666 Field Value double Properties CurrentFramesPerSecond Current frame rate in the past 1 second public static int CurrentFramesPerSecond { get; } Property Value int CurrentTime Current time in seconds since start of the game public static double CurrentTime { get; } Property Value double DeltaFactor FPS * FrameDeltaTime public static double DeltaFactor { get; } Property Value double DeltaTime Delta time since last frame update public static double DeltaTime { get; } Property Value double"
  },
  "api/Fantas.TriangleNode.html": {
    "href": "api/Fantas.TriangleNode.html",
    "title": "Class TriangleNode | Fantas",
    "keywords": "Class TriangleNode Namespace Fantas Assembly Fantas.dll Triangle Node public class TriangleNode : ShapeNode Inheritance object Node ShapeNode TriangleNode Inherited Members ShapeNode.StrokeColor ShapeNode.FillColor ShapeNode.BlendMode ShapeNode.LineWidth ShapeNode.Antialiased Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDownInside(TouchEventArgs) Node.OnTouchDragEnter(TouchEventArgs) Node.OnTouchDragExit(TouchEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpInside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnMouseDown(MouseEventArgs) Node.OnMouseUp(MouseEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseEnter() Node.OnMouseHover() Node.OnMouseLeave() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Width Node.Height Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupBody(TriangleNode, int) Constructors TriangleNode(TriangleNode) Copy the triangle node public TriangleNode(TriangleNode other) Parameters other TriangleNode TriangleNode(PointF, PointF, PointF) Create a triangle node public TriangleNode(PointF pointA, PointF pointB, PointF pointC) Parameters pointA PointF pointB PointF pointC PointF TriangleNode(PointF[]) Create the triangle node public TriangleNode(PointF[] points) Parameters points PointF[] Properties PointA Triangle point A public PointF PointA { get; } Property Value PointF PointB Triangle point B public PointF PointB { get; } Property Value PointF PointC Triangle point C public PointF PointC { get; } Property Value PointF Points Triangle points public PointF[] Points { get; set; } Property Value PointF[] Methods Copy() Copy node protected override Node Copy() Returns Node"
  },
  "api/Fantas.UI.ButtonNode.html": {
    "href": "api/Fantas.UI.ButtonNode.html",
    "title": "Class ButtonNode | Fantas",
    "keywords": "Class ButtonNode Namespace Fantas.UI Assembly Fantas.dll Button Node public class ButtonNode : ControlNode Inheritance object Node SpriteNode ControlNode ButtonNode Inherited Members ControlNode.OnMouseEnter() ControlNode.OnMouseDown(MouseEventArgs) ControlNode.OnMouseUp(MouseEventArgs) ControlNode.OnMouseLeave() ControlNode.OnTouchDownInside(TouchEventArgs) ControlNode.OnTouchDragEnter(TouchEventArgs) ControlNode.OnTouchDragExit(TouchEventArgs) ControlNode.Enabled ControlNode.State SpriteNode.Copy() SpriteNode.ScaleTo(SizeF) SpriteNode.OnSizeChanged() SpriteNode.Inflate(Vector2) SpriteNode.Inflate(float, float) SpriteNode.Inflate(float) SpriteNode.ExpandWidth(float) SpriteNode.ExpandHeight(float) SpriteNode.BlendMode SpriteNode.AnchorPoint SpriteNode.Color SpriteNode.TopLeftColor SpriteNode.TopRightColor SpriteNode.TopColor SpriteNode.BottomRightColor SpriteNode.RightColor SpriteNode.BottomLeftColor SpriteNode.LeftColor SpriteNode.BottomColor SpriteNode.ColorBlendFactor SpriteNode.CenterRect SpriteNode.Size SpriteNode.Width SpriteNode.Height SpriteNode.Texture Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseHover() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupBody(SpriteNode, int) NodeExtensions.SetupEdge(SpriteNode, int) Constructors ButtonNode() Construct ButtonNode public ButtonNode() Properties DisabledTexture Default Disabled ButtonNode texture public static Texture DisabledTexture { get; } Property Value Texture HoverTexture Default Hover ButtonNode texture public static Texture HoverTexture { get; } Property Value Texture LabelNode Button Label public LabelNode LabelNode { get; } Property Value LabelNode NormalTexture Default Normal ButtonNode texture public static Texture NormalTexture { get; } Property Value Texture PressedTexture Default Pressed ButtonNode texture public static Texture PressedTexture { get; } Property Value Texture Text Button text public string Text { get; set; } Property Value string TextColor Button text color public Color TextColor { get; set; } Property Value Color Methods OnClick(MouseEventArgs) Node override to call Press public override void OnClick(MouseEventArgs args) Parameters args MouseEventArgs OnPressed() Called when Button is pressed public virtual void OnPressed() OnStateChanged() Update Button Texture on state change protected override void OnStateChanged() OnTouchUpInside(TouchEventArgs) Node override to call Press public override void OnTouchUpInside(TouchEventArgs args) Parameters args TouchEventArgs Press() Trigger button pressed event public void Press() Events Pressed Event called when Button is pressed public event EventHandler<EventArgs> Pressed Event Type EventHandler<EventArgs>"
  },
  "api/Fantas.UI.ControlNode.html": {
    "href": "api/Fantas.UI.ControlNode.html",
    "title": "Class ControlNode | Fantas",
    "keywords": "Class ControlNode Namespace Fantas.UI Assembly Fantas.dll Base class for UI control nodes public abstract class ControlNode : SpriteNode Inheritance object Node SpriteNode ControlNode Derived ButtonNode Inherited Members SpriteNode.Copy() SpriteNode.ScaleTo(SizeF) SpriteNode.OnSizeChanged() SpriteNode.Inflate(Vector2) SpriteNode.Inflate(float, float) SpriteNode.Inflate(float) SpriteNode.ExpandWidth(float) SpriteNode.ExpandHeight(float) SpriteNode.BlendMode SpriteNode.AnchorPoint SpriteNode.Color SpriteNode.TopLeftColor SpriteNode.TopRightColor SpriteNode.TopColor SpriteNode.BottomRightColor SpriteNode.RightColor SpriteNode.BottomLeftColor SpriteNode.LeftColor SpriteNode.BottomColor SpriteNode.ColorBlendFactor SpriteNode.CenterRect SpriteNode.Size SpriteNode.Width SpriteNode.Height SpriteNode.Texture Node.ToString() Node.Offset(Vector2) Node.Offset(float, float) Node.OffsetX(float) Node.OffsetY(float) Node.CalculateAccumulatedFrame() Node.RenderToTexture() Node.SetScale(float) Node.SetScale(Vector2) Node.AddChild(Node) Node.InsertChild(int, Node) Node.MoveToParent(Node) Node.RemoveFromParent() Node.RemoveAllChildren() Node.RemoveChildren(Node[]) Node.RemoveChild(Node) Node.InParentHierarchy(Node) Node.RunAnimation(Animation) Node.RunAnimation(Animation, Action) Node.RunAnimation(Animation, string) Node.RunAnimationAsync(Animation) Node.GetAnimationForKey(string) Node.RemoveAnimationForKey(string) Node.RemoveAllAnimations() Node.ContainsPoint(PointF) Node.GetNodeAtPoint(PointF) Node.GetChildNode(string) Node.GetNodesAtPoint(PointF) Node.IntersectsNode(Node) Node.ConvertPointFromNode(PointF, Node) Node.ConvertPointToNode(PointF, Node) Node.BringForward() Node.BringToFront() Node.SendBackward() Node.SendToBack() Node.OnTap(TapEventArgs) Node.OnLongPress(TapEventArgs) Node.OnDoubleTap(TapEventArgs) Node.OnTouchDragInside(TouchEventArgs) Node.OnTouchDragOutside(TouchEventArgs) Node.OnTouchUpOutside(TouchEventArgs) Node.OnClick(MouseEventArgs) Node.OnDoubleClick(MouseEventArgs) Node.OnMouseHover() Node.Name Node.Tag Node.Cursor Node.Position Node.Frame Node.X Node.Y Node.Center Node.Left Node.Right Node.Top Node.Bottom Node.ZPosition Node.ZRotation Node.XScale Node.YScale Node.Scale Node.Scene Node.Parent Node.Children Node.HasChildren Node.HasParent Node.PhysicsBody Node.Hidden Node.Alpha Node.HasAnimation Node.Paused Node.Speed Node.IsHitTestEnabled Node.CanBringForward Node.CanSendBackward Node.IsMouseOver Node.MouseButtonPressed Node.IsTouchOver Node.TouchCount Node.Tap Node.DoubleTap Node.LongPress Node.TouchDownInside Node.TouchDragEnter Node.TouchDragExit Node.TouchDragInside Node.TouchDragOutside Node.TouchUpInside Node.TouchUpOutside Node.MouseDown Node.MouseUp Node.Click Node.DoubleClick Node.MouseEnter Node.MouseHover Node.MouseLeave object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods NodeExtensions.SetupBody(SpriteNode, int) NodeExtensions.SetupEdge(SpriteNode, int) Constructors ControlNode() Control ctor protected ControlNode() Properties Enabled Enable/Disable user interaction on Control public bool Enabled { get; set; } Property Value bool State Get Control current state protected ControlState State { get; } Property Value ControlState Methods OnMouseDown(MouseEventArgs) OnMouseDown override public override void OnMouseDown(MouseEventArgs args) Parameters args MouseEventArgs OnMouseEnter() OnMouseEnter override public override void OnMouseEnter() OnMouseLeave() OnMouseLeave override public override void OnMouseLeave() OnMouseUp(MouseEventArgs) OnMouseDown override public override void OnMouseUp(MouseEventArgs args) Parameters args MouseEventArgs OnStateChanged() Called when control state change protected virtual void OnStateChanged() OnTouchDownInside(TouchEventArgs) OnTouchDownInside override public override void OnTouchDownInside(TouchEventArgs args) Parameters args TouchEventArgs OnTouchDragEnter(TouchEventArgs) OnTouchDragEnter override public override void OnTouchDragEnter(TouchEventArgs args) Parameters args TouchEventArgs OnTouchDragExit(TouchEventArgs) OnTouchDragExit override public override void OnTouchDragExit(TouchEventArgs args) Parameters args TouchEventArgs OnTouchUpInside(TouchEventArgs) OnTouchUpInside override public override void OnTouchUpInside(TouchEventArgs args) Parameters args TouchEventArgs"
  },
  "api/Fantas.UI.ControlState.html": {
    "href": "api/Fantas.UI.ControlState.html",
    "title": "Enum ControlState | Fantas",
    "keywords": "Enum ControlState Namespace Fantas.UI Assembly Fantas.dll Control states public enum ControlState Fields Disabled = 3 When the control was disabled Hovered = 1 Hovered, when mouse cursor is hovering over Normal = 0 Normal state Pressed = 2 Pressed, when the primary mouse is pressing or the control have a touch inside"
  },
  "api/Fantas.UI.html": {
    "href": "api/Fantas.UI.html",
    "title": "Namespace Fantas.UI | Fantas",
    "keywords": "Namespace Fantas.UI Classes ButtonNode Button Node ControlNode Base class for UI control nodes Enums ControlState Control states"
  },
  "api/Fantas.Vector2Extensions.html": {
    "href": "api/Fantas.Vector2Extensions.html",
    "title": "Class Vector2Extensions | Fantas",
    "keywords": "Class Vector2Extensions Namespace Fantas Assembly Fantas.dll Vector2 extension methods public static class Vector2Extensions Inheritance object Vector2Extensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods FromRotation(double, float) Create a Vector given a rotation and lenght public static Vector2 FromRotation(double angle, float length) Parameters angle double length float Returns Vector2 Perpendicular(Vector2) Get the perpendicular vector public static Vector2 Perpendicular(this Vector2 vector) Parameters vector Vector2 Returns Vector2 Rotate(Vector2, double) Rotate vector to an angle public static Vector2 Rotate(this Vector2 vector, double angle) Parameters vector Vector2 angle double New rotation angle of vector Returns Vector2 new vector with the new angle RotateAround(Vector2, Vector2, double) Rotate around an origin point public static Vector2 RotateAround(this Vector2 vector, Vector2 origin, double angle) Parameters vector Vector2 origin Vector2 angle double Returns Vector2 RotateTo(Vector2, double) Rotate vector by an angle public static Vector2 RotateTo(this Vector2 vector, double angle) Parameters vector Vector2 angle double Angle radians to rotate Returns Vector2 Rotation(Vector2) Get the Vector in radians public static double Rotation(this Vector2 vector) Parameters vector Vector2 Returns double ToPointF(Vector2) Convert Vector to PointF public static PointF ToPointF(this Vector2 vector) Parameters vector Vector2 Returns PointF"
  },
  "api/Fantas.html": {
    "href": "api/Fantas.html",
    "title": "Namespace Fantas | Fantas",
    "keywords": "Namespace Fantas Classes Animation Animation class (Move, Scale, Rotate, Fade...) CameraNode Control which part of the scene is visible in the viewport CircleNode Circle shape node ColorExtensions Contains Color extensions Implementation code took from Allegro and Troll2D: https://github.com/liballeg/allegro5/blob/master/addons/color/color.c https://github.com/viniciusjarina/troll2d/blob/master/include/troll/color.h CropNode Node to Clip/Crop other nodes CurrentSystemPlatform Current system platform information (Windows, MacOS.. ) EllipseNode Ellipse shape node Font Font (TTF font on iOS/tvOS/macOS, and SpriteFont on other platforms) Game Main Game LabelNode Node that contains a text MathClamp Contains helper methods for doing Lerp to make it easier port games from MonoGame to Fantas Some methods imported from XNA/MonoGame MathHelper https://github.com/MonoGame/MonoGame/blob/develop/MonoGame.Framework/MathHelper.cs MathLerp Contains helper methods for doing Lerp to make it easier port games from MonoGame to Fantas Some methods imported from XNA/MonoGame MathHelper https://github.com/MonoGame/MonoGame/blob/develop/MonoGame.Framework/MathHelper.cs Node Base Node for other Nodes ParticleEmitterNode Node that emit particles (like fire, smoke, explosion) PointExtension PointF method extensions PolygonNode Create a polygon shape node RandomExtensions Random extension methods RectangleExtensions RectangleF extension methods RectangleNode Rectangle/Round Rectangle shape node Scene Scene is where all nodes are displayed ShapeNode ShapeNode (Rectangle, Ellipse, Triangle) SpriteFrameNode Frame edge using SpriteNodes SpriteLineNode Create a line as a SpriteNode Drawing a Line using a Sprite can be better for performance reasons since Sprite drawing can be batched. SpriteNode Node that draws a Sprite SpritePolylineNode Polyline made of multiple sprite node lines Texture Texture TextureAtlas A set of Textures grouped You can use Texture atlas when you have a set of textures that need to be loaded together. On old devices this can help to save VRAM, since all only one texture is loaded into the GPU and the small textures are bits of the main texture atlas. TileDefinition Tile Definition Defines a single tile that can be repeated in a tile map TileGroup Tile Group is either a definition for one tile or a collection of Tile Group Rules with adjacency TileGroupRule Rule on how the tile is placed in a tile map TileMapNode Tile Map node. TileSet Contains definitions and group rules to be used in a Tile map Time Get game time information TriangleNode Triangle Node Vector2Extensions Vector2 extension methods Enums AnimationTimingMode Animation timing modes BlendMode Blend modes operations GameOptions Game Flags used on game creation object LabelHorizontalAlignmentMode Label text horizontal alignment LabelVerticalAlignmentMode Label text vertical alignment OutlinePosition Outline Position Flags SceneScaleMode SceneScale configure how the current Scene will be scaled when the window or view is resized. The resize could happen because the user resized the window or rotated the device SystemPlatform Enumeration to with runtime system platform TileAdjacencyMask Tile Adjacency Mask TileDefinitionRotation Tile rotation types TileSetType Tile Set arrange/geometry Delegates AnimationTimingFunction Delegate used to customize timing function"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Fantas",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Fantas",
    "keywords": "Introduction"
  },
  "eula.html": {
    "href": "eula.html",
    "title": "| Fantas",
    "keywords": "END USER LICENSE AGREEMENT FOR FANTAS This End User License Agreement (\"Agreement\") is a legal agreement between you and Codefoco (\"Company\") and applies to the use of the Fantas software (\"Software\"). By purchasing and using the Software, you agree to be bound by the terms of this Agreement. If you do not agree to the terms of this Agreement, do not use the Software. License Grant. Company grants you a limited, non-exclusive, non-transferable license to use the Software solely for your personal or internal business purposes, provided that you have paid the applicable license fee. You may not use the Software for any other purpose, including but not limited to resale, distribution, sublicensing, or service bureau use. Intellectual Property. The Software and all intellectual property rights therein, including but not limited to copyrights, trademarks, and trade secrets, are the property of Company and its licensors. You acknowledge and agree that the Software and all related documentation are proprietary products of Company and its licensors, protected under copyright and other intellectual property laws. Restrictions on Use. You may not modify, reverse engineer, decompile, or disassemble the Software in any way. You may not create any derivative works based on the Software. You may not use the Software in any manner that infringes the intellectual property rights of Company or its licensors. You may not distribute or transfer the Software to any third party. Termination. This Agreement is effective until terminated. You may terminate this Agreement at any time by destroying all copies of the Software in your possession. This Agreement will also terminate automatically if you fail to comply with any term or condition of this Agreement. Upon termination, you must destroy all copies of the Software in your possession. Disclaimer of Warranty. THE SOFTWARE IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND. COMPANY AND ITS LICENSORS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Limitation of Liability. IN NO EVENT SHALL COMPANY OR ITS LICENSORS BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO LOST PROFITS, LOST SAVINGS, OR OTHER INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE SOFTWARE. Governing Law. This Agreement shall be governed by and construed in accordance with the laws of the [State/Country] without giving effect to any principles of conflicts of law. Entire Agreement. This Agreement constitutes the entire agreement between you and Company and supersedes any prior agreements or understandings, whether oral or written. This Agreement may not be amended or modified except in writing signed by both parties. Severability. If any provision of this Agreement is found to be invalid or unenforceable, that provision shall be enforced to the maximum extent possible, and the remaining provisions shall remain in full force and effect. Waiver. The failure of either party to exercise any right provided for herein shall not be deemed a waiver of any further rights hereunder. By using the Software, you acknowledge that you have read this Agreement, understand it, and agree to be bound by its terms and conditions."
  },
  "index.html": {
    "href": "index.html",
    "title": "Fantas | Fantas",
    "keywords": "Fantas WARNING : Fantas is currently in preview, it shouldn't be used for production Fantas is a 2D graphics rendering and animation framework for .NET. It is designed to make it easy for developers to create 2D games and interactive apps for Desktop and mobile devices. Fantas uses a node-based system to create and render 2D graphics. Nodes are objects that represent a visual element or piece of content in a Fantas Scene. They can be used to create and animate sprites (2D images), display text, play sounds, and perform other actions. Fantas also includes a physics engine that can be used to simulate realistic physics in a 2D environment, as well as a particle generator for creating special effects like explosions or particle trails. Overall, Fantas is a powerful tool for building 2D games and interactive experiences on mobile or Desktop. Fantas is cross platform and supports Android, iOS/tvOS, macOS, Linux and Windows. Fantas can be used to develop games on any platform that supports .NET. The design and architecture of Fantas was heavily influenced by other .NET libraries like WinForms, MonoGame and gaming libraries like Cocos. Fantas is a commercial product. If you want to use it, please read the end user license agreement. Quick Start: Windows macOS Linux"
  },
  "linux.html": {
    "href": "linux.html",
    "title": "Quick Start on Linux | Fantas",
    "keywords": "Quick Start on Linux Setup development Fantas work on Linux using modern .NET. Install .NET on Linux. Install Fantas templates for dotnet new. dotnet new install Fantas.Templates This will install .NET Fantas templates, you can crate a new desktop game doing mkdir MyGame cd MyGame dotnet new fantas-desktop"
  },
  "mac.html": {
    "href": "mac.html",
    "title": "Quick Start on Mac | Fantas",
    "keywords": "Quick Start on Mac Setup development Fantas will Visual Studio Mac 2022 or superior. The latest Visual Studio Mac is recommended. Install ⬇ Fantas.Extension for Visual Studio Mac. Go to Visual Studio > Extensions... Menu option. Install from file... and select the Fantas.Extension.mpack. Create new project After installing Visual Studio Mac extension, create a new project using File New Project: The extension added options to create a new game for Desktop, macOS (native), Android, iOS and tvOS Or Using dotnet new command line If you want to create new game using new .NET instead of the classic you can do from the command line: Install Fantas templates for dotnet new. dotnet new install Fantas.Templates This will install .NET Fantas templates, you can crate a new desktop game doing mkdir MyGame cd MyGame dotnet new fantas-desktop This are the templates available: -------------------------------------------- -------------- -------- --------------------------- Fantas Android Game (.NET) fantas-android [C#] android/mobile/games Fantas Desktop DirectX Game (.NET - Windows) fantas-directx [C#] desktop/games/windows Fantas Desktop Game (.NET) fantas-desktop [C#] desktop/games/linux/windows Fantas iOS Game (.NET) fantas-ios [C#] ios/games Fantas macOS Game (.NET) fantas-mac [C#] macos/games Fantas tvOS Game (.NET) fantas-tvos [C#] tvos/games"
  },
  "windows.html": {
    "href": "windows.html",
    "title": "Quick Start on Windows | Fantas",
    "keywords": "Quick Start on Windows Setup development Fantas will work with most .NET tools (Visual Studio 2017 or superior). The latest Visual Studio is recommended. Install ⬇ Fantas.Extension for Visual Studio. Create new project After installing Visual Studio extension, create a new project using File New Project: Or Using dotnet new command line If you want to create new game using new .NET instead of the classic you can do from the command line: Install Fantas templates for dotnet new. dotnet new install Fantas.Templates This will install .NET Fantas templates, you can crate a new desktop game doing mkdir MyGame cd MyGame dotnet new fantas-desktop This are the templates available: -------------------------------------------- -------------- -------- --------------------------- Fantas Android Game (.NET) fantas-android [C#] android/mobile/games Fantas Desktop DirectX Game (.NET - Windows) fantas-directx [C#] desktop/games/windows Fantas Desktop Game (.NET) fantas-desktop [C#] desktop/games/linux/windows Fantas iOS Game (.NET) fantas-ios [C#] ios/games Fantas macOS Game (.NET) fantas-mac [C#] macos/games Fantas tvOS Game (.NET) fantas-tvos [C#] tvos/games"
  }
}